<?xml version="1.0" encoding="UTF-8" ?>
<?oracle-xsl-mapper
  <!-- SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY. -->
  <mapSources>
    <source type="WSDL">
      <schema location="oramds:/apps/AIAMetaData/AIAComponents/ApplicationConnectorServiceLibrary/PDC/V1/ProviderABCS/SyncItemListPDCProvABCSImpl.wsdl"/>
      <rootElement name="SyncItemListEBM" namespace="http://xmlns.oracle.com/EnterpriseObjects/Core/EBO/Item/V2"/>
    </source>
  </mapSources>
  <mapTargets>
    <target type="WSDL">
      <schema location="oramds:/apps/AIAMetaData/AIAComponents/ApplicationConnectorServiceLibrary/PDC/V1/ProviderABCS/SyncItemListPDCProvABCSImpl.wsdl"/>
      <rootElement name="PricingObjectsJXB" namespace="http://xmlns.oracle.com/communications/platform/model/pricing"/>
    </target>
  </mapTargets>
  <!-- GENERATED BY ORACLE XSL MAPPER 11.1.1.7.0(build 130301.0647.0008) AT [THU APR 03 21:48:37 IST 2014]. -->
?>
<xsl:stylesheet version="2.0"
                xmlns:svcdoc="http://xmlns.oracle.com/Services/Documentation/V1"
                xmlns:aia="http://www.oracle.com/XSL/Transform/java/oracle.apps.aia.core.xpath.AIAFunctions"
                xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
                xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
                xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns:ns1="http://xmlns.oracle.com/communications/platform/model/pricing"
                xmlns:ns4="http://xmlns.oracle.com/EnterpriseObjects/Core/CommonEBO/V1"
                xmlns:ns2="urn:PricingGateWay"
                xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
                xmlns:plnk="http://schemas.xmlsoap.org/ws/2003/05/partner-link/"
                xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                xmlns:ns9="http://xmlns.oracle.com/EnterpriseObjects/Core/Custom/Common/V2"
                xmlns:ora="http://schemas.oracle.com/xpath/extension"
                xmlns:socket="http://www.oracle.com/XSL/Transform/java/oracle.tip.adapter.socket.ProtocolTranslator"
                xmlns:eboabcs="http://xmlns.oracle.com/ABCSImpl/PDC/Core/SyncItemListPDCProvABCSImpl/V1"
                xmlns:ns0="http://schemas.xmlsoap.org/ws/2003/03/addressing"
                xmlns:ns3="http://schemas.oracle.com/service/bpel/common"
                xmlns:mhdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.mediator.service.common.functions.MediatorExtnFunction"
                xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
                xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
                xmlns:eboebo="http://xmlns.oracle.com/EnterpriseObjects/Core/EBO/Item/V2"
                xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
                xmlns:med="http://schemas.oracle.com/mediator/xpath"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
                xmlns:ns5="urn:oasis:names:tc:xacml:2.0:policy:schema:cd:04"
                xmlns:ns6="http://xmlns.oracle.com/EnterpriseObjects/Core/Custom/EBO/Item/V2"
                xmlns:ns7="http://xmlns.oracle.com/communications/platform/model/Common"
                xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
                xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
                xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:ns8="http://xmlns.oracle.com/EnterpriseObjects/Core/Common/V2"
                xmlns:ns10="urn:oasis:names:tc:xacml:2.0:context:schema:cd:04"
                xmlns:ns11="http://xmlns.oracle.com/EnterpriseObjects/Core/Custom/CommonEBO/V1"
                xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
				xmlns:fn="http://www.w3.org/2005/xpath-functions"
                exclude-result-prefixes="xsi xsl svcdoc ns1 ns4 ns2 plnk soap ns9 eboabcs ns0 ns3 eboebo ns5 ns6 ns7 xsd ns8 ns10 ns11 aia bpws xp20 bpel bpm ora socket mhdr oraext dvm hwf med ids xdk xref ldap">
                
    <xsl:variable name="SourceCol" select='"COMMON"'/>
    <xsl:variable name="targetID">
    <xsl:choose>
      <xsl:when test="boolean(/eboebo:SyncItemListEBM/ns2:EBMHeader/ns2:Target/ns2:ID/text())">
        <xsl:value-of select="/eboebo:SyncItemListEBM/ns2:EBMHeader/ns2:Target/ns2:ID"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="aia:getServiceProperty('{http://xmlns.oracle.com/ABCSImpl/PDC/Core/SyncItemListPDCProvABCSImpl/V1}SyncItemListPDCProvABCSImpl','Default.SystemID',true())"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>
  <xsl:variable name="TargetCol" select="$targetID"/>
  <xsl:template match="/">
    <ns1:PricingObjectsJXB>
     <xsl:for-each select="fn:distinct-values(/eboebo:SyncItemListEBM/eboebo:DataArea[eboebo:SyncItemList/ns4:ItemServiceCharacteristics/ns4:BillingEntityTypeCode = &quot;SPONSORSHIP&quot; and ns8:Sync/@syncActionCode = &quot;add&quot;]/eboebo:SyncItemList/ns4:ItemSpecificationGroup/ns8:SpecificationGroup[ns8:Name = &quot;Sponsorship_Event_Map&quot;]/ns8:Specification[ns8:Name = &quot;Charge_Share_Model&quot;]/ns8:ValueText)">
          <!--xsl:if test="boolean(ns8:Specification[ns8:Name = &quot;Charge_Share_Model&quot;]/ns8:ValueText/text())"-->
              <xsl:variable name="IfPDCChargeShareModelIdExists" select="xref:lookupXRef('oramds:/apps/AIAMetaData/xref/SPONSORSHIPOBJECT_ID.xref',$SourceCol,.,$TargetCol,false())"/>
              <xsl:if test="$IfPDCChargeShareModelIdExists = ''">
              <distributionRatePlan xmlns:pdc="http://xmlns.oracle.com/communications/platform/model/pricing">
                <name>
                  <xsl:value-of select="."/>
                </name>
                <pricingProfileName>
                    <xsl:text disable-output-escaping="no">ChargeSharing</xsl:text>
                </pricingProfileName>
                <priceListName>
                    <xsl:text disable-output-escaping="no">Default</xsl:text>
                </priceListName>
                <drpDateRange>
                    <startDate>
                        <xsl:text disable-output-escaping="no">0</xsl:text>
                    </startDate>
                    <endDate>
                      <xsl:text disable-output-escaping="no">inf</xsl:text>
                    </endDate>
                    <distributionConfiguration>
                        <drpCompositePopModel>
                            <name>
                                <xsl:text disable-output-escaping="no">Pricing</xsl:text>
                            </name>
                            <alterationPopModel>
                                <priceTier>
                                  <distributionMethod>
                                      <xsl:text disable-output-escaping="no">FROM_BAL_IMPACT</xsl:text>
                                  </distributionMethod>
                                  <tierBasis>
                                      <chargeTierExpression>
                                          <useTierComponent>
                                              <xsl:text disable-output-escaping="no">false</xsl:text>
                                          </useTierComponent>
                                      </chargeTierExpression>
                                  </tierBasis>
                                  <lowerBound>
                                      <numberTBExpression>
                                          <value>
                                              <xsl:text disable-output-escaping="no">0.0</xsl:text>
                                          </value>
                                      </numberTBExpression>
                                  </lowerBound>
                                  <tierRange>
                                      <upperBound>
                                          <numberTBExpression>
                                              <value>
                                                <xsl:text disable-output-escaping="no">NO_MAX</xsl:text>
                                              </value>
                                          </numberTBExpression>
                                      </upperBound>
                                      <percentAlteration>
                                          <price>
                                              <xsl:text disable-output-escaping="no">0.0</xsl:text>
                                          </price>
                                          <unitOfMeasure>
                                            <xsl:text disable-output-escaping="no">NONE</xsl:text>
                                          </unitOfMeasure>
                                          <balanceElementNumCode>
                                                <xsl:text disable-output-escaping="no">840</xsl:text>
                                          </balanceElementNumCode>
                                          <alterationAppliesTo>
                                                <xsl:text disable-output-escaping="no">USER</xsl:text>
                                           </alterationAppliesTo>
                                           <alterationBasedOn>
                                               <chargeBasisExpression>
                                                   <useTierComponent>
                                                      <xsl:text disable-output-escaping="no">false</xsl:text>
                                                   </useTierComponent>
                                                </chargeBasisExpression>
                                             </alterationBasedOn>
                                             <priceType>
                                                <xsl:text disable-output-escaping="no">GRANT</xsl:text>
                                             </priceType>
                                             <priceValidity>
                                                <startValidityMode>
                                                   <xsl:text disable-output-escaping="no">IMMEDIATE</xsl:text>
                                                </startValidityMode>
                                                <endValidityMode>
                                                   <xsl:text disable-output-escaping="no">RELATIVE_TO_START</xsl:text>
                                                </endValidityMode>
                                                <relativeStartOffset>
                                                   <xsl:text disable-output-escaping="no">-1</xsl:text>
                                                </relativeStartOffset>
                                                <relativeEndOffset>
                                                   <xsl:text disable-output-escaping="no">1</xsl:text>
                                                </relativeEndOffset>
                                                <relativeStartOffsetUnit>
                                                   <xsl:text disable-output-escaping="no">BILLING_CYCLE</xsl:text>
                                                </relativeStartOffsetUnit>
                                                <relativeEndOffsetUnit>
                                                   <xsl:text disable-output-escaping="no">BILLING_CYCLE</xsl:text>
                                                </relativeEndOffsetUnit>
                                             </priceValidity>
                                        </percentAlteration>
                                      </tierRange>
                                    </priceTier>
                                </alterationPopModel>
                            </drpCompositePopModel>
                        </distributionConfiguration>
                    </drpDateRange>
                 </distributionRatePlan>
            </xsl:if>
      </xsl:for-each>
      <xsl:for-each select='/eboebo:SyncItemListEBM/eboebo:DataArea[(eboebo:SyncItemList/ns4:ItemServiceCharacteristics/ns4:BillingEntityTypeCode = "SPONSORSHIP") and (ns8:Sync/@syncActionCode = "add")]'>
        <distributionOffering>
          <xsl:attribute name="externalID">
            <xsl:value-of select="eboebo:SyncItemList/ns8:ItemIdentification/ns8:AlternateObjectKey/ns8:ID"/>
          </xsl:attribute>
          <name>
            <xsl:value-of select="eboebo:SyncItemList/ns4:Name"/>
          </name>
          <description>
            <xsl:value-of select="eboebo:SyncItemList/ns4:Description"/>
          </description>
          <pricingProfileName>
            <xsl:text disable-output-escaping="no">Product Offering</xsl:text>
          </pricingProfileName>
          <xsl:choose>
                  <xsl:when test="boolean(eboebo:SyncItemList/ns8:EffectiveTimePeriod/ns8:StartDateTime/text()) and boolean(eboebo:SyncItemList/ns8:EffectiveTimePeriod/ns8:EndDateTime/text())">
                     <xsl:variable name="startdatetime">
                        <xsl:call-template name="getUTCDateTime">
                           <xsl:with-param name="datetime" select="substring-before(eboebo:SyncItemList/ns8:EffectiveTimePeriod/ns8:StartDateTime,'+')"/>
                        </xsl:call-template>
                     </xsl:variable>
                     <xsl:variable name="enddatetime">
                        <xsl:call-template name="getUTCDateTime">
                           <xsl:with-param name="datetime" select="substring-before(eboebo:SyncItemList/ns8:EffectiveTimePeriod/ns8:EndDateTime,'+')"/>
                        </xsl:call-template>
                     </xsl:variable>
                     <timeRange>
                        <xsl:value-of select="concat($startdatetime,'/',$enddatetime)"/>
                     </timeRange>
                  </xsl:when>
                  <xsl:when test="boolean(eboebo:SyncItemList/ns8:EffectiveTimePeriod/ns8:StartDateTime/text()) and not(boolean(eboebo:SyncItemList/ns8:EffectiveTimePeriod/ns8:EndDateTime/text()))">
                     <xsl:variable name="startdatetime">
                        <xsl:call-template name="getUTCDateTime">
                           <xsl:with-param name="datetime" select="substring-before(eboebo:SyncItemList/ns8:EffectiveTimePeriod/ns8:StartDateTime,'+')"/>
                        </xsl:call-template>
                     </xsl:variable>
                     <timeRange>
                        <xsl:value-of select="concat($startdatetime,'/','inf')"/>
                     </timeRange>
                  </xsl:when>
                  <xsl:when test="not(boolean(eboebo:SyncItemList/ns8:EffectiveTimePeriod/ns8:StartDateTime/text())) and boolean(eboebo:SyncItemList/ns8:EffectiveTimePeriod/ns8:EndDateTime/text())">
                     <xsl:variable name="enddatetime">
                        <xsl:call-template name="getUTCDateTime">
                           <xsl:with-param name="datetime" select="substring-before(eboebo:SyncItemList/ns8:EffectiveTimePeriod/ns8:EndDateTime,'+')"/>
                        </xsl:call-template>
                     </xsl:variable>
                     <timeRange>
                        <xsl:value-of select="concat('0','/',$enddatetime)"/>
                     </timeRange>
                  </xsl:when>
                  <xsl:otherwise>
                     <timeRange>
                        <xsl:value-of select="concat('0','/','inf')"/>
                     </timeRange>
                  </xsl:otherwise>
               </xsl:choose> 
              <xsl:choose>
                  <xsl:when test="contains(eboebo:SyncItemList/ns4:ItemClassification/ns4:ClassificationCode[@listID='Billing_Service_Type'],'/service/')">
                     <productSpecName>
                        <xsl:call-template name="CamelCase">
                           <xsl:with-param name="text" select="substring-after(eboebo:SyncItemList/ns4:ItemClassification/ns4:ClassificationCode[@listID='Billing_Service_Type'],'/service')"/>
                        </xsl:call-template>
                     </productSpecName>
                  </xsl:when>
                  <xsl:when test="contains(eboebo:SyncItemList/ns4:ItemClassification/ns4:ClassificationCode[@listID='Billing_Service_Type'],'/account')">
                     <customerSpecName>
                        <xsl:call-template name="CamelCase">
                           <xsl:with-param name="text" select="eboebo:SyncItemList/ns4:ItemClassification/ns4:ClassificationCode[@listID='Billing_Service_Type']"/>
                        </xsl:call-template>
                     </customerSpecName>
                  </xsl:when>
                  <xsl:otherwise>
                     <productSpecName>
                        <xsl:call-template name="CamelCase">
                           <xsl:with-param name="text" select="eboebo:SyncItemList/ns4:ItemClassification/ns4:ClassificationCode[@listID='Billing_Service_Type']"/>
                        </xsl:call-template>
                     </productSpecName>
                  </xsl:otherwise>
          </xsl:choose>
          <xsl:for-each select='eboebo:SyncItemList/ns4:ItemSpecificationGroup/ns8:SpecificationGroup[ns8:Name = "Sponsorship_Event_Map"]'>
            <distributionEventMap>
               <xsl:if test="boolean(ns8:Specification[ns8:Name='Event']/ns8:ValueText/text())">
                <eventName>
                  <xsl:value-of select="dvm:lookupValue('oramds:/apps/AIAMetaData/dvm/PRICETYPE_EVENT.dvm',$SourceCol,ns8:Specification[ns8:Name='Event']/ns8:ValueText,$TargetCol,'')"/>
                </eventName>
              </xsl:if>
              <!-- Fix for bug 19293358-->
					 <xsl:choose>
						<xsl:when test="ns8:Specification[ns8:Name='Stop_Charge_Sharing']/ns8:ValueText = 'WHEN_INACTIVATE'">
							<validIfCancelled>
								<xsl:text disable-output-escaping="no">true</xsl:text>
							</validIfCancelled>
							<validIfInactive>
								<xsl:text disable-output-escaping="no">false</xsl:text>
							</validIfInactive>
						</xsl:when>
						<xsl:when test="ns8:Specification[ns8:Name='Stop_Charge_Sharing']/ns8:ValueText = 'WHEN_CANCELED'">
							<validIfCancelled>
								<xsl:text disable-output-escaping="no">false</xsl:text>
							</validIfCancelled>
							<validIfInactive>
								<xsl:text disable-output-escaping="no">true</xsl:text>
							</validIfInactive>
						</xsl:when>
						<xsl:when test="ns8:Specification[ns8:Name='Stop_Charge_Sharing']/ns8:ValueText = 'WHEN_INACTIVATE_OR_CANCELED'">
							<validIfCancelled>
								<xsl:text disable-output-escaping="no">false</xsl:text>
							</validIfCancelled>
							<validIfInactive>
								<xsl:text disable-output-escaping="no">false</xsl:text>
							</validIfInactive>
						</xsl:when>
						<xsl:when test="ns8:Specification[ns8:Name='Stop_Charge_Sharing']/ns8:ValueText = 'NEVER'">
							<validIfCancelled>
								<xsl:text disable-output-escaping="no">true</xsl:text>
							</validIfCancelled>
							<validIfInactive>
								<xsl:text disable-output-escaping="no">true</xsl:text>
							</validIfInactive>
						</xsl:when>
						<xsl:otherwise>
							<validIfCancelled>
								<xsl:text disable-output-escaping="no">false</xsl:text>
							</validIfCancelled>
							<validIfInactive>
								<xsl:text disable-output-escaping="no">false</xsl:text>
							</validIfInactive>
						</xsl:otherwise>
					 </xsl:choose>
			   <!-- End of the fix for the bug 19293358-->
              <xsl:if test="boolean(ns8:Specification[ns8:Name = &quot;Charge_Share_Model&quot;]/ns8:ValueText/text())">
                  <distributionRatePlanName>
                       <xsl:value-of select="ns8:Specification[ns8:Name = &quot;Charge_Share_Model&quot;]/ns8:ValueText"/>
                  </distributionRatePlanName>
              </xsl:if>
            </distributionEventMap>
          </xsl:for-each>
        </distributionOffering>
      </xsl:for-each>
    </ns1:PricingObjectsJXB>
  </xsl:template> 
  <!--  User Defined Templates  --> 
  <xsl:template name="getUTCDateTime">
    <xsl:param name="datetime"/>
    <xsl:value-of select="translate($datetime,':-+','')"/>
  </xsl:template> 
  <xsl:template name="CamelCaseWord">
    <xsl:param name="text"/>
    <xsl:value-of select="translate(substring($text,1,1),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/>
    <xsl:value-of select="translate(substring($text,2,string-length($text)-1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
  </xsl:template> 
  <xsl:template name="CamelCase">
    <xsl:param name="text"/>
    <xsl:choose>
      <xsl:when test="contains($text,'/')">
        <xsl:call-template name="CamelCaseWord">
          <xsl:with-param name="text" select="substring-before($text,'/')"/>
        </xsl:call-template>
        <xsl:call-template name="CamelCase">
          <xsl:with-param name="text" select="substring-after($text,'/')"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="CamelCaseWord">
          <xsl:with-param name="text" select="$text"/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  </xsl:stylesheet>
