<?xml version='1.0' encoding='UTF-8'?>
<?oracle-xsl-mapper
  <!-- SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY. -->
  <mapSources>
    <source type="WSDL">
      <schema location="oramds:/apps/AIAMetaData/AIAComponents/ApplicationConnectorServiceLibrary/PDC/V1/ProviderABCS/SyncPriceListPDCProvABCSImpl.wsdl"/>
      <rootElement name="SyncPriceListListEBM" namespace="http://xmlns.oracle.com/EnterpriseObjects/Core/EBO/PriceList/V2"/>
    </source>
  </mapSources>
  <mapTargets>
    <target type="WSDL">
      <schema location="oramds:/apps/AIAMetaData/AIAComponents/ApplicationObjectLibrary/PDC/schemas/Pricing/PricingObjects.xsd"/>
      <rootElement name="PricingObjectsJXB" namespace="http://xmlns.oracle.com/communications/platform/model/pricing"/>
    </target>
  </mapTargets>
  <!-- GENERATED BY ORACLE XSL MAPPER 11.1.1.7.0(build 130301.0647.0008) AT [WED JUL 17 10:37:09 IST 2013]. -->
?>
<xsl:stylesheet version="2.0" xmlns:svcdoc="http://xmlns.oracle.com/Services/Documentation/V1" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:eboabcs="http://xmlns.oracle.com/ABCSImpl/PDC/Core/SyncPriceListPDCProvABCSImpl/V1" xmlns:eboebo="http://xmlns.oracle.com/EnterpriseObjects/Core/EBO/PriceList/V2" xmlns:aia="http://www.oracle.com/XSL/Transform/java/oracle.apps.aia.core.xpath.AIAFunctions" xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20" xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns6="http://xmlns.oracle.com/communications/platform/model/pricing" xmlns:tns="urn:PricingGateWay" xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions" xmlns:ns4="http://xmlns.oracle.com/EnterpriseObjects/Core/Custom/EBO/PriceList/V2" xmlns:ejb="http://schemas.xmlsoap.org/wsdl/ejb/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:format="http://schemas.xmlsoap.org/wsdl/formatbinding/" xmlns:plnk="http://schemas.xmlsoap.org/ws/2003/05/partner-link/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:ns1="http://xmlns.oracle.com/EnterpriseObjects/Core/Custom/Common/V2" xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:socket="http://www.oracle.com/XSL/Transform/java/oracle.tip.adapter.socket.ProtocolTranslator" xmlns:ns0="http://schemas.xmlsoap.org/ws/2003/03/addressing" xmlns:mhdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.mediator.service.common.functions.MediatorExtnFunction" xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc" xmlns:pricinggateway="http://www.oracle.com/communications/pricing" xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue" xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath" xmlns:med="http://schemas.oracle.com/mediator/xpath" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath" xmlns:ns5="urn:oasis:names:tc:xacml:2.0:policy:schema:cd:04" xmlns:ns7="http://xmlns.oracle.com/communications/platform/model/Common" xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk" xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns2="http://xmlns.oracle.com/EnterpriseObjects/Core/Common/V2" xmlns:ns3="urn:oasis:names:tc:xacml:2.0:context:schema:cd:04" xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap" exclude-result-prefixes="xsi xsl svcdoc eboabcs eboebo ns6 ns4 plnk soap ns1 ns0 ns5 ns7 xsd ns2 ns3 aia bpws xp20 bpel bpm ora socket mhdr oraext dvm hwf med ids xdk xref ldap">
	<xsl:variable name="NoRestrictions" select="&quot;NO_RESTRICTIONS&quot;"/>
	<xsl:variable name="Absolute" select="&quot;ABSOLUTE&quot;"/>
	<xsl:variable name="Relative" select="&quot;RELATIVE&quot;"/>
	<xsl:variable name="SourceCol" select="'COMMON'"/>
	<xsl:variable name="targetID">
		<xsl:choose>
			<xsl:when test="boolean(/eboebo:SyncPriceListListEBM/ns2:EBMHeader/ns2:Target/ns2:ID/text())">
				<xsl:value-of select="/eboebo:SyncPriceListListEBM/ns2:EBMHeader/ns2:Target/ns2:ID"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="aia:getServiceProperty('{http://xmlns.oracle.com/ABCSImpl/PDC/Core/SyncPriceListPDCProvABCSImpl/V1}SyncPriceListPDCProvABCSImpl','Default.SystemID',true())"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>
	<xsl:variable name="TargetCol" select="$targetID"/>
	<xsl:template match="/">
		<ns6:PricingObjectsJXB>
			<xsl:for-each select="eboebo:SyncPriceListListEBM/eboebo:DataArea[((eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'BillingTypeCode']/ns2:ValueCode = 'SUBSCRIPTION') or (eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'BillingTypeCode']/ns2:ValueCode = 'SYSTEM') or (eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'BillingTypeCode']/ns2:ValueCode = 'ITEM')) and (eboebo:SyncPriceListList/@actionCode = 'add')]">
				<xsl:for-each select="eboebo:SyncPriceListList/eboebo:PriceListLine/eboebo:LinePrice">
					<xsl:variable name="pricing_profile" select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/PRICETYPE_EVENT.dvm&quot;,$SourceCol,eboebo:TypeCode,'PRICINGPROFILE_PDC',&quot;&quot;)"/>
					<xsl:variable name="uom_code" select="eboebo:UOMCode"/>
					<xsl:variable name="rateplantype_code" select="eboebo:RatePlanTypeCode"/>
					<xsl:for-each select="eboebo:RatePlan">
						<xsl:variable name="IfChargeRatePlanIdExists" select="xref:lookupXRef('oramds:/apps/AIAMetaData/xref/CHARGERATEPLAN_ID.xref',$SourceCol,concat(eboebo:Name,'-',../../ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'InternalItemCode']/ns2:ValueText),$TargetCol,false())"/>
						<xsl:if test="$IfChargeRatePlanIdExists = ''">
							<xsl:variable name="event_type" select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/PRICETYPE_EVENT.dvm&quot;,$SourceCol,../eboebo:TypeCode,'PRICECHARGETYPE_PDC',&quot;&quot;)"/>
							<chargeRatePlan>
								<name>
									<xsl:value-of select="concat(eboebo:Name,'-',../../ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'InternalItemCode']/ns2:ValueText)"/>
								</name>
								<description>
									<xsl:value-of select="eboebo:Description"/>
								</description>
								<pricingProfileName>
									<xsl:value-of select="$pricing_profile"/>
								</pricingProfileName>
								<priceListName>
									<xsl:text disable-output-escaping="no">Default</xsl:text>
								</priceListName>
						<!-- Start: Added TaxCode to fix the OOTB product sync issue for Product with taxes -->
                        <taxCode>
                           <xsl:value-of select="eboebo:TaxCode"/>
                        </taxCode>		
						<!-- End Added TaxCode to fix the OOTB product sync issue for Product with taxes -->	
								<applicableRums>
									<xsl:value-of select="../eboebo:UOMCode"/>
								</applicableRums>
								<taxTime>
									<xsl:choose>
										<xsl:when test="boolean(eboebo:TaxApplicabilityCode/text())">
											<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/RATEPLAN_TAXAPPLICABILITYCODE.dvm&quot;,$SourceCol,eboebo:TaxApplicabilityCode,$TargetCol,&quot;&quot;)"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:text disable-output-escaping="no">NONE</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</taxTime>
								<todMode>
									<xsl:text disable-output-escaping="no">START_TIME</xsl:text>
								</todMode>
								<permittedName>
									<xsl:choose>
										<xsl:when test="contains(../../ns2:ItemReference/ns2:ClassificationCode,'/service/')">
											<xsl:call-template name="CamelCase">
												<xsl:with-param name="text" select="substring-after(../../ns2:ItemReference/ns2:ClassificationCode,'/service')"/>
											</xsl:call-template>
										</xsl:when>
										<xsl:otherwise>
											<xsl:call-template name="CamelCase">
												<xsl:with-param name="text" select="../../ns2:ItemReference/ns2:ClassificationCode"/>
											</xsl:call-template>
										</xsl:otherwise>
									</xsl:choose>
								</permittedName>
								<permittedType>
									<xsl:choose>
										<xsl:when test="contains(../../ns2:ItemReference/ns2:ClassificationCode,'/account')">
											<xsl:text disable-output-escaping="no">CUSTOMER</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<xsl:text disable-output-escaping="no">PRODUCT</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</permittedType>
								<xsl:if test="../eboebo:TypeCode/text()">
									<eventName>
										<xsl:value-of select="dvm:lookupValue('oramds:/apps/AIAMetaData/dvm/PRICETYPE_EVENT.dvm',$SourceCol,../eboebo:TypeCode,$TargetCol,'')"/>
									</eventName>
								</xsl:if>
								<xsl:if test="boolean(eboebo:BillingDateRecurringChargeApplicationRequiredIndicator/text())">
									<xsl:choose>
										<xsl:when test="eboebo:BillingDateRecurringChargeApplicationRequiredIndicator = &quot;false&quot;">
											<cycleFeeFlag>
												<xsl:value-of select="1.0"/>
											</cycleFeeFlag>
										</xsl:when>
										<xsl:when test="eboebo:BillingDateRecurringChargeApplicationRequiredIndicator = &quot;true&quot;">
											<cycleFeeFlag>
												<xsl:value-of select="0.0"/>
											</cycleFeeFlag>
										</xsl:when>
									</xsl:choose>
								</xsl:if>
								<xsl:choose>
									<xsl:when test="boolean(eboebo:AdvanceRecurringChargeDuration/text())">
										<xsl:variable name="UOM" select="substring(eboebo:AdvanceRecurringChargeDuration,string-length(eboebo:AdvanceRecurringChargeDuration))"/>
										<xsl:variable name="actualvalue" select="substring-before(substring-after(eboebo:AdvanceRecurringChargeDuration,&quot;P&quot;),$UOM)"/>
										<billOffset>
											<xsl:value-of select="$actualvalue"/>
										</billOffset>
									</xsl:when>
									<xsl:otherwise>
										<billOffset>
											<xsl:text disable-output-escaping="no">0</xsl:text>
										</billOffset>
									</xsl:otherwise>
								</xsl:choose>
								<xsl:if test="$event_type='RECURRING'">
									<subscriberCurrency>
										<currencyCode>
											<xsl:choose>
												<xsl:when test="boolean(eboebo:UnitCode/text())">
													<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/CURRENCY_CODE.dvm&quot;,$SourceCol,eboebo:UnitCode,$TargetCol,&quot;&quot;)"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:text disable-output-escaping="no">USD</xsl:text>
												</xsl:otherwise>
											</xsl:choose>
										</currencyCode>
										<xsl:for-each select="eboebo:RateDetail/eboebo:PlanTier">
											<xsl:if test="eboebo:RateRestrictionTypeCode = $NoRestrictions or eboebo:RateRestrictionTypeCode = ''">
												<xsl:for-each select="eboebo:PriceListUnrestrictedRateData">
													<crpRelDateRange>
														<xsl:if test="../eboebo:EffectivityModeCode = $Absolute or ../eboebo:EffectivityModeCode = ''">
															<absoluteDateRange>
																<xsl:choose>
																	<xsl:when test="boolean(../ns2:EffectiveTimePeriod/ns2:StartDateTime/text())">
																		<startDate>
																			<xsl:call-template name="getUTCDateTime">
																				<xsl:with-param name="datetime" select="substring-before(../ns2:EffectiveTimePeriod/ns2:StartDateTime,'+')"/>
																			</xsl:call-template>
																		</startDate>
																	</xsl:when>
																	<xsl:otherwise>
																		<startDate>
																			<xsl:text disable-output-escaping="no">0</xsl:text>
																		</startDate>
																	</xsl:otherwise>
																</xsl:choose>
																<xsl:choose>
																	<xsl:when test="boolean(../ns2:EffectiveTimePeriod/ns2:EndDateTime/text())">
																		<endDate>
																			<xsl:call-template name="getUTCDateTime">
																				<xsl:with-param name="datetime" select="substring-before(../ns2:EffectiveTimePeriod/ns2:EndDateTime,'+')"/>
																			</xsl:call-template>
																		</endDate>
																	</xsl:when>
																	<xsl:otherwise>
																		<endDate>
																			<xsl:text disable-output-escaping="no">inf</xsl:text>
																		</endDate>
																	</xsl:otherwise>
																</xsl:choose>
															</absoluteDateRange>
														</xsl:if>
														<xsl:if test="../eboebo:EffectivityModeCode = $Relative">
															<xsl:if test="boolean(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration/text()) or boolean(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration/text())">
																<relativeDateRange>
																	<startOffset>
																		<xsl:variable name="UOM" select="substring(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration,string-length(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration))"/>
																		<xsl:variable name="actualvalue" select="substring-before(substring-after(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration,'P'),$UOM)"/>
																		<xsl:value-of select="$actualvalue"/>
																	</startOffset>
																	<startUnit>
																		<xsl:variable name="UOM" select="substring(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration,string-length(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration))"/>
																		<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/PLANIMPACT_UNITCODE.dvm&quot;,$SourceCol,$UOM,$TargetCol,&quot;&quot;)"/>
																	</startUnit>
																	<endOffset>
																		<xsl:variable name="UOM" select="substring(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration,string-length(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration))"/>
																		<xsl:variable name="actualvalue" select="substring-before(substring-after(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration,'P'),$UOM)"/>
																		<xsl:value-of select="$actualvalue"/>
																	</endOffset>
																	<endUnit>
																		<xsl:variable name="UOM" select="substring(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration,string-length(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration))"/>
																		<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/PLANIMPACT_UNITCODE.dvm&quot;,$SourceCol,$UOM,$TargetCol,&quot;&quot;)"/>
																	</endUnit>
																	<base>PRODUCT_PURCHASE</base>
																</relativeDateRange>
															</xsl:if>
														</xsl:if>
														<crpCompositePopModel>
														<!-- Bug 21898705 fix  -->
															<name>
																<xsl:choose>
																	<xsl:when test="eboebo:PriceListRateData[1]/eboebo:Name!=''">
																		<xsl:value-of select="eboebo:PriceListRateData[1]/eboebo:Name"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:text disable-output-escaping="no">Pricing</xsl:text>
																	</xsl:otherwise>
																</xsl:choose>    
																</name>
																<!-- Bug 21898705 fix  -->
															<recurringPopModel>
																<xsl:for-each select="eboebo:PriceListRateData">
																	<xsl:variable name="PlanImpactID">
																		<xsl:value-of select="ns2:PlanImpactIdentification/ns2:ID"/>
																	</xsl:variable>
																	<xsl:variable name="enforceCreditLimit">
																		<xsl:value-of select="eboebo:OverridenCreditLimitIndicator"/>
																	</xsl:variable>
																	<priceTier>
																		<xsl:variable name="RecurringLowerBound">
																			<xsl:choose>
																				<xsl:when test="../../eboebo:PlanImpact[1]/eboebo:RateMinimumQuantity=''">																				
																					<xsl:text disable-output-escaping="no">NO_MIN</xsl:text>																				
																				</xsl:when>
																				<xsl:otherwise>																				
																					<xsl:value-of select="../../eboebo:PlanImpact[1]/eboebo:RateMinimumQuantity"/>																				
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:variable>
																		<lowerBound>
																			<xsl:value-of select="$RecurringLowerBound"/>
																		</lowerBound>
																		<tierBasis>
																			<rumTierExpression/>
																		</tierBasis>
																		<rumName>
																			<xsl:value-of select="$uom_code"/>
																		</rumName>
																		<enforceCreditLimit>
																			<xsl:value-of select="$enforceCreditLimit"/>
																		</enforceCreditLimit>	
																		<xsl:variable name="AllPlanImpacts" select="../../eboebo:PlanImpact"/>
																		<xsl:for-each select="fn:distinct-values(../../eboebo:PlanImpact/eboebo:RateMinimumQuantity)">
																			<xsl:variable name="CurrentMinQty" select="."/>	
																			<!-- <xsl:if test="$RecurringLowerBound!=$CurrentMinQty and $CurrentMinQty!=''"> -->
																				<xsl:call-template name="GenericTierRange">
																					<xsl:with-param name="ChargeType" select="'Recurring'"/>
																					<xsl:with-param name="PlanImpacts" select="$AllPlanImpacts[eboebo:RateMinimumQuantity=$CurrentMinQty]"/>
																					<xsl:with-param name="AllPlanImpacts" select="$AllPlanImpacts"/>			
																					<xsl:with-param name="LowerBound" select="$RecurringLowerBound"/>
																				</xsl:call-template>
																			<!-- </xsl:if>	-->																		
																		</xsl:for-each>	
																		<xsl:if test="count(../../eboebo:PlanImpact[eboebo:RateMaximumQuantity=''])>0">
																			<tierRange>
																				<upperBound>
																					<xsl:text disable-output-escaping="no">NO_MAX</xsl:text>
																				</upperBound>
																				<xsl:for-each select="../../eboebo:PlanImpact[eboebo:RateMaximumQuantity='']">
																					<recurringCharge>
																						<xsl:call-template name="TierChargeDetails">
																							<xsl:with-param name="ScaledQty" select="eboebo:ScaledQuantity"/>
																							<xsl:with-param name="ScaledUnit" select="eboebo:ScaledUnit"/>
																							<xsl:with-param name="MonetaryID" select="ns2:Identification/ns2:ID"/>
																							<xsl:with-param name="GrantIndicator" select="eboebo:EffectivityEnabledIndicator"/>
																							<xsl:with-param name="DiscIndicator" select="eboebo:DiscountableIndicator"/>
																							<xsl:with-param name="glid" select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
																							<xsl:with-param name="StartDateSelector" select="eboebo:StartDateSelector"/>
																							<xsl:with-param name="EndDateSelector" select="eboebo:EndDateSelector"/>
																							<xsl:with-param name="StartRelativeUnit" select="eboebo:StartRelativeUnit"/>
																							<xsl:with-param name="StartRelativeUOM" select="eboebo:StartRelativeUOM"/>
																							<xsl:with-param name="EndRelativeUnit" select="eboebo:EndRelativeUnit"/>
																							<xsl:with-param name="EndRelativeUOM" select="eboebo:EndRelativeUOM"/>
																							<xsl:with-param name="StartDateTime" select="ns2:EffectiveTimePeriod/ns2:StartDateTime"/>
																							<xsl:with-param name="EndDateTime" select="ns2:EffectiveTimePeriod/ns2:EndDateTime"/>
																						</xsl:call-template>


																						<xsl:if test="eboebo:EffectivityEnabledIndicator!='true' and boolean(ns2:GLAccount/ns2:Identification/ns2:ID/text())">
																							<glid>
																								<xsl:value-of select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
																							</glid>
																						</xsl:if>

																						<proratable>
																							<xsl:value-of select="eboebo:ProrationIndicator"/>
																						</proratable>
																					</recurringCharge>
																				</xsl:for-each>
																			</tierRange>
																		</xsl:if>
																	</priceTier>
																</xsl:for-each>
															</recurringPopModel>
														</crpCompositePopModel>
													</crpRelDateRange>
												</xsl:for-each>
											</xsl:if>
										</xsl:for-each>
									</subscriberCurrency>
								</xsl:if>
								<xsl:if test="$event_type = &quot;ONETIME&quot;">
									<subscriberCurrency>
										<currencyCode>
											<xsl:choose>
												<xsl:when test="boolean(eboebo:UnitCode/text())">
													<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/CURRENCY_CODE.dvm&quot;,$SourceCol,eboebo:UnitCode,$TargetCol,&quot;&quot;)"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:text disable-output-escaping="no">USD</xsl:text>
												</xsl:otherwise>
											</xsl:choose>
										</currencyCode>
										<xsl:for-each select="eboebo:RateDetail/eboebo:PlanTier">
											<xsl:if test="eboebo:RateRestrictionTypeCode = $NoRestrictions or eboebo:RateRestrictionTypeCode = ''">
												<xsl:for-each select="eboebo:PriceListUnrestrictedRateData">
													<crpRelDateRange>
														<xsl:if test="../eboebo:EffectivityModeCode = $Absolute or ../eboebo:EffectivityModeCode = ''">
															<absoluteDateRange>
																<xsl:choose>
																	<xsl:when test="boolean(../ns2:EffectiveTimePeriod/ns2:StartDateTime/text())">
																		<startDate>
																			<xsl:call-template name="getUTCDateTime">
																				<xsl:with-param name="datetime" select="substring-before(../ns2:EffectiveTimePeriod/ns2:StartDateTime,'+')"/>
																			</xsl:call-template>
																		</startDate>
																	</xsl:when>
																	<xsl:otherwise>
																		<startDate>
																			<xsl:text disable-output-escaping="no">0</xsl:text>
																		</startDate>
																	</xsl:otherwise>
																</xsl:choose>
																<xsl:choose>
																	<xsl:when test="boolean(../ns2:EffectiveTimePeriod/ns2:EndDateTime/text())">
																		<endDate>
																			<xsl:call-template name="getUTCDateTime">
																				<xsl:with-param name="datetime" select="substring-before(../ns2:EffectiveTimePeriod/ns2:EndDateTime,'+')"/>
																			</xsl:call-template>
																		</endDate>
																	</xsl:when>
																	<xsl:otherwise>
																		<endDate>
																			<xsl:text disable-output-escaping="no">inf</xsl:text>
																		</endDate>
																	</xsl:otherwise>
																</xsl:choose>
															</absoluteDateRange>
														</xsl:if>
														<xsl:if test="../eboebo:EffectivityModeCode = $Relative">
															<xsl:if test="boolean(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration/text()) or boolean(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration/text())">
																<relativeDateRange>
																	<startOffset>
																		<xsl:variable name="UOM" select="substring(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration,string-length(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration))"/>
																		<xsl:variable name="actualvalue" select="substring-before(substring-after(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration,'P'),$UOM)"/>
																		<xsl:value-of select="$actualvalue"/>
																	</startOffset>
																	<startUnit>
																		<xsl:variable name="UOM" select="substring(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration,string-length(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration))"/>
																		<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/PLANIMPACT_UNITCODE.dvm&quot;,$SourceCol,$UOM,$TargetCol,&quot;&quot;)"/>
																	</startUnit>
																	<endOffset>
																		<xsl:variable name="UOM" select="substring(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration,string-length(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration))"/>
																		<xsl:variable name="actualvalue" select="substring-before(substring-after(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration,'P'),$UOM)"/>
																		<xsl:value-of select="$actualvalue"/>
																	</endOffset>
																	<endUnit>
																		<xsl:variable name="UOM" select="substring(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration,string-length(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration))"/>
																		<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/PLANIMPACT_UNITCODE.dvm&quot;,$SourceCol,$UOM,$TargetCol,&quot;&quot;)"/>
																	</endUnit>
																	<base>PRODUCT_PURCHASE</base>
																</relativeDateRange>
															</xsl:if>
														</xsl:if>
														<crpCompositePopModel>
														<!-- Bug 21898705 fix  -->
															<name>
																<xsl:choose>
																	<xsl:when test="eboebo:PriceListRateData[1]/eboebo:Name!=''">
																		<xsl:value-of select="eboebo:PriceListRateData[1]/eboebo:Name"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:text disable-output-escaping="no">Pricing</xsl:text>
																	</xsl:otherwise>
																</xsl:choose>    
																</name>
																<!-- Bug 21898705 fix  -->
															<oneTimePopModel>
																<xsl:for-each select="eboebo:PriceListRateData">
																	<xsl:variable name="PlanImpactID">
																		<xsl:value-of select="ns2:PlanImpactIdentification/ns2:ID"/>
																	</xsl:variable>
																	<xsl:variable name="enforceCreditLimit">
																		<xsl:value-of select="eboebo:OverridenCreditLimitIndicator"/>
																	</xsl:variable>
																	<priceTier>
																		<xsl:variable name="OneTimeLowerBound">
																		<xsl:choose>
																			<xsl:when test="../../eboebo:PlanImpact[1]/eboebo:RateMinimumQuantity=''">
																				<lowerBound>
																					<xsl:text disable-output-escaping="no">NO_MIN</xsl:text>
																				</lowerBound>
																			</xsl:when>
																			<xsl:otherwise>
																				<lowerBound>
																					<xsl:value-of select="../../eboebo:PlanImpact[1]/eboebo:RateMinimumQuantity"/>
																				</lowerBound>
																			</xsl:otherwise>
																		</xsl:choose>
																		</xsl:variable>
																		<lowerBound>
																					<xsl:value-of select="$OneTimeLowerBound"/>
																				</lowerBound>
																		<tierBasis>
																			<rumTierExpression/>
																		</tierBasis>
																		<rumName>
																			<xsl:value-of select="$uom_code"/>
																		</rumName>
																		<enforceCreditLimit>
																			<xsl:value-of select="$enforceCreditLimit"/>
																		</enforceCreditLimit>
																		<xsl:variable name="AllPlanImpacts" select="../../eboebo:PlanImpact"/>
																		<xsl:for-each select="fn:distinct-values(../../eboebo:PlanImpact/eboebo:RateMinimumQuantity)">
																		
																			<xsl:variable name="CurrentMinQty" select="."/>	
																			<!-- <xsl:if test="$OneTimeLowerBound!=$CurrentMinQty and $CurrentMinQty!=''"> -->
																				<xsl:call-template name="GenericTierRange">
																					<xsl:with-param name="ChargeType" select="'OneTime'"/>
																					<xsl:with-param name="PlanImpacts" select="$AllPlanImpacts[eboebo:RateMinimumQuantity=$CurrentMinQty]"/>
																					<xsl:with-param name="AllPlanImpacts" select="$AllPlanImpacts"/>
																					<xsl:with-param name="LowerBound" select="$OneTimeLowerBound"/>
																				</xsl:call-template>
																			<!-- </xsl:if> -->																			
																		</xsl:for-each>	
																		<xsl:if test="count(../../eboebo:PlanImpact[eboebo:RateMaximumQuantity=''])>0">
																			<tierRange>
																				<upperBound>
																					<xsl:text disable-output-escaping="no">NO_MAX</xsl:text>
																				</upperBound>
																				<xsl:for-each select="../../eboebo:PlanImpact[eboebo:RateMaximumQuantity='']">
																					<oneTimeCharge>
																						<xsl:call-template name="TierChargeDetails">
																							<xsl:with-param name="ScaledQty" select="eboebo:ScaledQuantity"/>
																							<xsl:with-param name="ScaledUnit" select="eboebo:ScaledUnit"/>
																							<xsl:with-param name="MonetaryID" select="ns2:Identification/ns2:ID"/>
																							<xsl:with-param name="GrantIndicator" select="eboebo:EffectivityEnabledIndicator"/>
																							<xsl:with-param name="DiscIndicator" select="eboebo:DiscountableIndicator"/>
																							<xsl:with-param name="glid" select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
																							<xsl:with-param name="StartDateSelector" select="eboebo:StartDateSelector"/>
																							<xsl:with-param name="EndDateSelector" select="eboebo:EndDateSelector"/>
																							<xsl:with-param name="StartRelativeUnit" select="eboebo:StartRelativeUnit"/>
																							<xsl:with-param name="StartRelativeUOM" select="eboebo:StartRelativeUOM"/>
																							<xsl:with-param name="EndRelativeUnit" select="eboebo:EndRelativeUnit"/>
																							<xsl:with-param name="EndRelativeUOM" select="eboebo:EndRelativeUOM"/>
																							<xsl:with-param name="StartDateTime" select="ns2:EffectiveTimePeriod/ns2:StartDateTime"/>
																							<xsl:with-param name="EndDateTime" select="ns2:EffectiveTimePeriod/ns2:EndDateTime"/>
																						</xsl:call-template>
																						<xsl:if test="eboebo:EffectivityEnabledIndicator!='true'">
																							<taxTime>
																								<xsl:text disable-output-escaping="no">NONE</xsl:text>
																							</taxTime>
																							<xsl:choose>
																								<xsl:when test="boolean(ns2:GLAccount/ns2:Identification/ns2:ID/text())">
																									<glid>
																										<xsl:value-of select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
																									</glid>
																								</xsl:when>
																							</xsl:choose>
																						</xsl:if>
																					</oneTimeCharge>
																				</xsl:for-each>
																			</tierRange>
																		</xsl:if>
																	</priceTier>
																</xsl:for-each>
															</oneTimePopModel>
														</crpCompositePopModel>
													</crpRelDateRange>
												</xsl:for-each>
											</xsl:if>
										</xsl:for-each>
									</subscriberCurrency>
								</xsl:if>
								<xsl:if test="$event_type = &quot;USAGE&quot;">
									<subscriberCurrency>
										<currencyCode>
											<xsl:choose>
												<xsl:when test="boolean(eboebo:UnitCode/text())">
													<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/CURRENCY_CODE.dvm&quot;,$SourceCol,eboebo:UnitCode,$TargetCol,&quot;&quot;)"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:text disable-output-escaping="no">USD</xsl:text>
												</xsl:otherwise>
											</xsl:choose>
										</currencyCode>
										<xsl:if test="$rateplantype_code = 'SINGLE_RATE_PLAN'">
											<xsl:for-each select="eboebo:RateDetail/eboebo:PlanTier">
												<xsl:if test="eboebo:RateRestrictionTypeCode = $NoRestrictions or eboebo:RateRestrictionTypeCode = ''">
													<xsl:for-each select="eboebo:PriceListUnrestrictedRateData">
														<applicableRum>
															<applicableRumName>
																<xsl:call-template name="CamelCase">
																	<xsl:with-param name="text" select="$uom_code"/>
																</xsl:call-template>
															</applicableRumName>
															<minQuantity>
																<xsl:text disable-output-escaping="no">1.0</xsl:text>
															</minQuantity>
															<minQuantityUnit>
																<xsl:text disable-output-escaping="no">NONE</xsl:text>
															</minQuantityUnit>
															<incrementQuantity>
																<xsl:text disable-output-escaping="no">1.0</xsl:text>
															</incrementQuantity>
															<incrementQuantityUnit>
																<xsl:text disable-output-escaping="no">NONE</xsl:text>
															</incrementQuantityUnit>
															<roundingMode>
																<xsl:text disable-output-escaping="no">NEAREST</xsl:text>
															</roundingMode>
															<crpRelDateRange>
																<xsl:if test="../eboebo:EffectivityModeCode = $Absolute or ../eboebo:EffectivityModeCode = ''">
																	<absoluteDateRange>
																		<xsl:choose>
																			<xsl:when test="boolean(../ns2:EffectiveTimePeriod/ns2:StartDateTime/text())">
																				<startDate>
																					<xsl:call-template name="getUTCDateTime">
																						<xsl:with-param name="datetime" select="substring-before(../ns2:EffectiveTimePeriod/ns2:StartDateTime,'+')"/>
																					</xsl:call-template>
																				</startDate>
																			</xsl:when>
																			<xsl:otherwise>
																				<startDate>
																					<xsl:text disable-output-escaping="no">0</xsl:text>
																				</startDate>
																			</xsl:otherwise>
																		</xsl:choose>
																		<xsl:choose>
																			<xsl:when test="boolean(../ns2:EffectiveTimePeriod/ns2:EndDateTime/text())">
																				<endDate>
																					<xsl:call-template name="getUTCDateTime">
																						<xsl:with-param name="datetime" select="substring-before(../ns2:EffectiveTimePeriod/ns2:EndDateTime,'+')"/>
																					</xsl:call-template>
																				</endDate>
																			</xsl:when>
																			<xsl:otherwise>
																				<endDate>
																					<xsl:text disable-output-escaping="no">inf</xsl:text>
																				</endDate>
																			</xsl:otherwise>
																		</xsl:choose>
																	</absoluteDateRange>
																</xsl:if>
																<xsl:if test="../eboebo:EffectivityModeCode = $Relative">
																	<xsl:if test="boolean(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration/text()) or boolean(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration/text())">
																		<relativeDateRange>
																			<startOffset>
																				<xsl:variable name="UOM" select="substring(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration,string-length(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration))"/>
																				<xsl:variable name="actualvalue" select="substring-before(substring-after(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration,'P'),$UOM)"/>
																				<xsl:value-of select="$actualvalue"/>
																			</startOffset>
																			<startUnit>
																				<xsl:variable name="UOM" select="substring(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration,string-length(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeStartDuration))"/>
																				<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/PLANIMPACT_UNITCODE.dvm&quot;,$SourceCol,$UOM,$TargetCol,&quot;&quot;)"/>
																			</startUnit>
																			<endOffset>
																				<xsl:variable name="UOM" select="substring(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration,string-length(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration))"/>
																				<xsl:variable name="actualvalue" select="substring-before(substring-after(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration,'P'),$UOM)"/>
																				<xsl:value-of select="$actualvalue"/>
																			</endOffset>
																			<endUnit>
																				<xsl:variable name="UOM" select="substring(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration,string-length(../ns2:RelativeEffectiveTimePeriod/ns2:RelativeEndDuration))"/>
																				<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/PLANIMPACT_UNITCODE.dvm&quot;,$SourceCol,$UOM,$TargetCol,&quot;&quot;)"/>
																			</endUnit>
																			<base>PRODUCT_PURCHASE</base>
																		</relativeDateRange>
																	</xsl:if>
																</xsl:if>
																<crpCompositePopModel>
																<!-- Bug 21898705 fix  -->
															<name>
																<xsl:choose>
																	<xsl:when test="eboebo:PriceListRateData[1]/eboebo:Name!=''">
																		<xsl:value-of select="eboebo:PriceListRateData[1]/eboebo:Name"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:text disable-output-escaping="no">Pricing</xsl:text>
																	</xsl:otherwise>
																</xsl:choose>    
																</name>
																<!-- Bug 21898705 fix  -->
																	<usageChargePopModel>
																		<xsl:for-each select="eboebo:PriceListRateData">
																			<xsl:variable name="enforceCreditLimit">
																				<xsl:value-of select="eboebo:OverridenCreditLimitIndicator"/>
																			</xsl:variable>
																			
																				<priceTier>
																					<distributionMethod>
																						<xsl:text disable-output-escaping="no">FROM_BAL_IMPACT</xsl:text>
																					</distributionMethod>
																					<tierBasis>
																						<rumTierExpression/>
																					</tierBasis>
																					<enforceCreditLimit>
																						<xsl:value-of select="$enforceCreditLimit"/>
																					</enforceCreditLimit>
																					<rumName>
																						<xsl:value-of select="$uom_code"/>
																					</rumName>
																					<priceTierValidityPeriod>
																						<xsl:variable name="OnlineLowerBound">
																					<xsl:choose>
																				<xsl:when test="../../eboebo:PlanImpact[1]/eboebo:RateMinimumQuantity=''">																				
																					<xsl:text disable-output-escaping="no">NO_MIN</xsl:text>																				
																				</xsl:when>
																				<xsl:otherwise>																				
																					<xsl:value-of select="../../eboebo:PlanImpact[1]/eboebo:RateMinimumQuantity"/>																				
																				</xsl:otherwise>
																			</xsl:choose>
																					</xsl:variable>
																					<lowerBound>
																								<xsl:value-of select="$OnlineLowerBound"/>
																							</lowerBound>
																					<validFrom>
																						<xsl:text disable-output-escaping="no">0</xsl:text>
																					</validFrom>

																					<xsl:variable name="AllPlanImpacts" select="../../eboebo:PlanImpact"/>
																					<xsl:for-each select="fn:distinct-values(../../eboebo:PlanImpact/eboebo:RateMinimumQuantity)">
																					
																						<xsl:variable name="CurrentMinQty" select="."/>	
																						<!--<xsl:if test="$OnlineLowerBound!=$CurrentMinQty and $CurrentMinQty!=''"> -->
																							<xsl:call-template name="GenericTierRange">
																								<xsl:with-param name="ChargeType" select="'OnlineUsage'"/>
																								<xsl:with-param name="PlanImpacts" select="$AllPlanImpacts[eboebo:RateMinimumQuantity=$CurrentMinQty]"/>
																								<xsl:with-param name="AllPlanImpacts" select="$AllPlanImpacts"/>
																								<xsl:with-param name="LowerBound" select="$OnlineLowerBound"/>
																							</xsl:call-template>
																						<!--</xsl:if> -->																			
																					</xsl:for-each>	
																					<xsl:if test="count(../../eboebo:PlanImpact[eboebo:RateMaximumQuantity=''])>0">
																						<priceTierRange>
																							<upperBound>
																								<xsl:text disable-output-escaping="no">NO_MAX</xsl:text>
																							</upperBound>
																							<xsl:for-each select="../../eboebo:PlanImpact[eboebo:RateMaximumQuantity='']">
																							<scaledCharge>
																								<xsl:call-template name="TierChargeDetails">
																									<xsl:with-param name="ScaledQty" select="eboebo:ScaledQuantity"/>
																									<xsl:with-param name="ScaledUnit" select="eboebo:ScaledUnit"/>
																									<xsl:with-param name="MonetaryID" select="ns2:Identification/ns2:ID"/>
																									<xsl:with-param name="GrantIndicator" select="eboebo:EffectivityEnabledIndicator"/>
																									<xsl:with-param name="DiscIndicator" select="eboebo:DiscountableIndicator"/>
																									<xsl:with-param name="glid" select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
																									<xsl:with-param name="StartDateSelector" select="eboebo:StartDateSelector"/>
																									<xsl:with-param name="EndDateSelector" select="eboebo:EndDateSelector"/>
																									<xsl:with-param name="StartRelativeUnit" select="eboebo:StartRelativeUnit"/>
																									<xsl:with-param name="StartRelativeUOM" select="eboebo:StartRelativeUOM"/>
																									<xsl:with-param name="EndRelativeUnit" select="eboebo:EndRelativeUnit"/>
																									<xsl:with-param name="EndRelativeUOM" select="eboebo:EndRelativeUOM"/>
																									<xsl:with-param name="StartDateTime" select="ns2:EffectiveTimePeriod/ns2:StartDateTime"/>
																									<xsl:with-param name="EndDateTime" select="ns2:EffectiveTimePeriod/ns2:EndDateTime"/>
																								</xsl:call-template>
																								<xsl:if test="eboebo:EffectivityEnabledIndicator!='true'">
																									<taxTime>
																										<xsl:text disable-output-escaping="no">NONE</xsl:text>
																									</taxTime>
																									<xsl:choose>
																										<xsl:when test="boolean(ns2:GLAccount/ns2:Identification/ns2:ID/text())">
																											<glid>
																												<xsl:value-of select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
																											</glid>
																										</xsl:when>
																									</xsl:choose>
																								</xsl:if>
																								<incrementStep>
																									<xsl:text disable-output-escaping="no">1</xsl:text>
																								</incrementStep>
																								<incrementRounding>
																									<xsl:text disable-output-escaping="no">NONE</xsl:text>
																								</incrementRounding>
																							</scaledCharge>
																							</xsl:for-each>
																						</priceTierRange>
																					</xsl:if>
																					</priceTierValidityPeriod>
																					<applicableQuantity>
																						<xsl:text disable-output-escaping="no">ORIGINAL</xsl:text>
																					</applicableQuantity>
																				</priceTier>																			
																		</xsl:for-each>
																	</usageChargePopModel>
																</crpCompositePopModel>
															</crpRelDateRange>
														</applicableRum>
													</xsl:for-each>
												</xsl:if>
											</xsl:for-each>
										</xsl:if>
										<xsl:if test="$rateplantype_code = 'PIPELINE_SINGLE_RATE_PLAN'">
											<crpDateRange>
												<absoluteDateRange>
													<startDate>
														<xsl:text disable-output-escaping="no">0</xsl:text>
													</startDate>
													<endDate>
														<xsl:text disable-output-escaping="no">inf</xsl:text>
													</endDate>
												</absoluteDateRange>
												<crpCompositePopModel>
													<name>
														<xsl:text disable-output-escaping="no">Pricing</xsl:text>
													</name>
													<usageChargePopModel>
														<priceTier>
															<distributionMethod>
																<xsl:text disable-output-escaping="no">FROM_BAL_IMPACT</xsl:text>
															</distributionMethod>
															<tierBasis>
																<rumTierExpression/>
															</tierBasis>
															<enforceCreditLimit>
																<xsl:text disable-output-escaping="no">false</xsl:text>
															</enforceCreditLimit>
															<rumName>
																<xsl:value-of select="$uom_code"/>
															</rumName>
															<priceTierValidityPeriod>
																<xsl:call-template name="OfflineUsageTierRange"/>
															</priceTierValidityPeriod>
															<applicableQuantity>
																<xsl:text disable-output-escaping="no">ORIGINAL</xsl:text>
															</applicableQuantity>
														</priceTier>
													</usageChargePopModel>
												</crpCompositePopModel>
											</crpDateRange>
										</xsl:if>
									</subscriberCurrency>
								</xsl:if>
							</chargeRatePlan>
						</xsl:if>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="eboebo:SyncPriceListListEBM/eboebo:DataArea[((eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'BillingTypeCode']/ns2:ValueCode = 'SUBSCRIPTION') or (eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'BillingTypeCode']/ns2:ValueCode = 'SYSTEM') or (eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'BillingTypeCode']/ns2:ValueCode = 'ITEM')) and (eboebo:SyncPriceListList/@actionCode = 'add')]">
				<xsl:for-each select="eboebo:SyncPriceListList/eboebo:PriceListLine/eboebo:LinePrice">
					<xsl:variable name="ChargeRatePlanSelcId">
						<xsl:if test="(eboebo:RatePlanTypeCode = 'RATE_PLAN_SELECTOR' and boolean(eboebo:RatePlan[1]/eboebo:PriceListRatePlanSelector/eboebo:Name/text()))">
							<xsl:value-of select="xref:lookupXRef('oramds:/apps/AIAMetaData/xref/CHARGERATEPLANSELECTOR_ID.xref',$SourceCol,concat(eboebo:RatePlan[1]/eboebo:PriceListRatePlanSelector/eboebo:Name,'-',../ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'InternalItemCode']/ns2:ValueText),$TargetCol,false())"/>
						</xsl:if>
					</xsl:variable>
					<xsl:variable name="pricing_profile" select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/PRICETYPE_EVENT.dvm&quot;,$SourceCol,eboebo:TypeCode,'PRICINGPROFILE_PDC',&quot;&quot;)"/>
					<xsl:if test="$ChargeRatePlanSelcId = '' and boolean(eboebo:RatePlan[1]/eboebo:PriceListRatePlanSelector/eboebo:Name/text())">
						<chargeRateplanSelector>
							<name>
								<xsl:value-of select="concat(eboebo:RatePlan[1]/eboebo:PriceListRatePlanSelector/eboebo:Name,'-',../ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'InternalItemCode']/ns2:ValueText)"/>
							</name>
							<xsl:if test="boolean(eboebo:RatePlan[1]/eboebo:PriceListRatePlanSelector/eboebo:Description/text())">
								<description>
									<xsl:value-of select="eboebo:RatePlan[1]/eboebo:PriceListRatePlanSelector/eboebo:Description"/>
								</description>
							</xsl:if>
							<pricingProfileName>
								<xsl:value-of select="$pricing_profile"/>
							</pricingProfileName>
							<priceListName>
								<xsl:text disable-output-escaping="no">Default</xsl:text>
							</priceListName>
							<stereoType>
								<xsl:text disable-output-escaping="no">CHARGE_RATE_PLAN_SELECTOR</xsl:text>
							</stereoType>
							<xsl:variable name="typecode">
								<xsl:if test="eboebo:TypeCode/text()">
									<xsl:value-of select="dvm:lookupValue('oramds:/apps/AIAMetaData/dvm/PRICETYPE_EVENT.dvm',$SourceCol,eboebo:TypeCode,$TargetCol,'')"/>
								</xsl:if>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="contains(../ns2:ItemReference/ns2:ClassificationCode,'/service/')">
									<productSpecName>
										<xsl:call-template name="CamelCase">
											<xsl:with-param name="text" select="substring-after(../ns2:ItemReference/ns2:ClassificationCode,'/service')"/>
										</xsl:call-template>
									</productSpecName>
									<xsl:if test="eboebo:TypeCode/text()">
										<eventSpecName>
											<xsl:value-of select="$typecode"/>
										</eventSpecName>
									</xsl:if>
								</xsl:when>
								<xsl:when test="contains(../ns2:ItemReference/ns2:ClassificationCode,'/account')">
									<xsl:if test="eboebo:TypeCode/text()">
										<eventSpecName>
											<xsl:value-of select="$typecode"/>
										</eventSpecName>
									</xsl:if>
									<customerSpecName>
										<xsl:call-template name="CamelCase">
											<xsl:with-param name="text" select="../ns2:ItemReference/ns2:ClassificationCode"/>
										</xsl:call-template>
									</customerSpecName>
								</xsl:when>
								<xsl:otherwise>
									<productSpecName>
										<xsl:call-template name="CamelCase">
											<xsl:with-param name="text" select="../ns2:ItemReference/ns2:ClassificationCode"/>
										</xsl:call-template>
									</productSpecName>
									<xsl:if test="eboebo:TypeCode/text()">
										<eventSpecName>
											<xsl:value-of select="$typecode"/>
										</eventSpecName>
									</xsl:if>
								</xsl:otherwise>
							</xsl:choose>              
							<validityPeriod>
								<validFrom>
									<xsl:text disable-output-escaping="no">0</xsl:text>
								</validFrom>
								<xsl:for-each select="eboebo:RatePlan">
									<rule>
										<xsl:choose>
											<xsl:when test="boolean((eboebo:RatePlan[1]/eboebo:PriceListRatePlanSelector/eboebo:Name/text()) and (ns2:Identification/ns2:ApplicationObjectKey/ns2:ID/text()))">
												<name>
													<xsl:value-of select="dvm:lookupValue('oramds:/apps/AIAMetaData/dvm/PRICELIST.dvm',$SourceCol,ns2:Identification/ns2:ApplicationObjectKey/ns2:ID,$TargetCol,'')"/>
												</name>
											</xsl:when>
											<xsl:otherwise>
												<name>
													<xsl:value-of select="'Default'"/>
												</name>
											</xsl:otherwise>
										</xsl:choose>
										<result>
											<resultName>
												<xsl:value-of select="concat(eboebo:Name,'-',../../ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'InternalItemCode']/ns2:ValueText)"/>
											</resultName>
										</result>
										<fieldToValueExpression>
											<operation>
												<xsl:text disable-output-escaping="no">EQUAL_TO</xsl:text>
											</operation>
											<seperator>
												<xsl:text disable-output-escaping="no">;</xsl:text>
											</seperator>
											<fieldName>
												<xsl:value-of select="concat($typecode,'.','USAGE_TYPE')"/>
											</fieldName>
											<xsl:choose>
												<xsl:when test="boolean(ns2:Identification/ns2:ApplicationObjectKey/ns2:ID/text())">
													<fieldValue>
														<xsl:value-of select="dvm:lookupValue('oramds:/apps/AIAMetaData/dvm/PRICELIST.dvm',$SourceCol,ns2:Identification/ns2:ApplicationObjectKey/ns2:ID,$TargetCol,'')"/>
													</fieldValue>
												</xsl:when>
												<xsl:otherwise>
													<fieldValue>
														<xsl:text disable-output-escaping="no">*</xsl:text>
													</fieldValue>
												</xsl:otherwise>
											</xsl:choose>
											<fieldKind>
												<xsl:text disable-output-escaping="no">EVENT_SPEC_FIELD</xsl:text>
											</fieldKind>
										</fieldToValueExpression>
									</rule>
								</xsl:for-each>
							</validityPeriod>
						</chargeRateplanSelector>
					</xsl:if>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="eboebo:SyncPriceListListEBM/eboebo:DataArea[((eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'BillingTypeCode']/ns2:ValueCode = 'SUBSCRIPTION') or (eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'BillingTypeCode']/ns2:ValueCode = 'SYSTEM') or (eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'BillingTypeCode']/ns2:ValueCode = 'ITEM')) and (eboebo:SyncPriceListList/@actionCode = 'add')]">
				<chargeOffering>
					<xsl:attribute name="externalID">
						<xsl:value-of select="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;InternalItemCode&quot;]/ns2:ValueText"/>
					</xsl:attribute>
					<name>
						<xsl:value-of select="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:Name"/>
					</name>
					<description>
						<xsl:value-of select="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:Description"/>
					</description>
					<pricingProfileName>
						<xsl:text disable-output-escaping="no">Product Offering</xsl:text>
					</pricingProfileName>
					<priceListName>
						<xsl:text disable-output-escaping="no">Default</xsl:text>
					</priceListName>
					<xsl:choose>
						<xsl:when test="boolean(eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;StartDate&quot;]/ns2:ValueDateTime/text()) and boolean(eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;EndDate&quot;]/ns2:ValueDateTime/text())">
							<xsl:variable name="startdatetime">
								<xsl:call-template name="getUTCDateTime">
									<xsl:with-param name="datetime" select="substring-before(eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'StartDate']/ns2:ValueDateTime,'+')"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:variable name="enddatetime">
								<xsl:call-template name="getUTCDateTime">
									<xsl:with-param name="datetime" select="substring-before(eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'EndDate']/ns2:ValueDateTime,'+')"/>
								</xsl:call-template>
							</xsl:variable>
							<timeRange>
								<xsl:value-of select="concat($startdatetime,'/',$enddatetime)"/>
							</timeRange>
						</xsl:when>
						<xsl:when test="boolean(eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;StartDate&quot;]/ns2:ValueDateTime/text()) and not(boolean(eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;EndDate&quot;]/ns2:ValueDateTime/text()))">
							<xsl:variable name="startdatetime">
								<xsl:call-template name="getUTCDateTime">
									<xsl:with-param name="datetime" select="substring-before(eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'StartDate']/ns2:ValueDateTime,'+')"/>
								</xsl:call-template>
							</xsl:variable>
							<timeRange>
								<xsl:value-of select="concat($startdatetime,'/','inf')"/>
							</timeRange>
						</xsl:when>
						<xsl:when test="not(boolean(eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;StartDate&quot;]/ns2:ValueDateTime/text())) and boolean(eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;EndDate&quot;]/ns2:ValueDateTime/text())">
							<xsl:variable name="enddatetime">
								<xsl:call-template name="getUTCDateTime">
									<xsl:with-param name="datetime" select="substring-before(eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'EndDate']/ns2:ValueDateTime,'+')"/>
								</xsl:call-template>
							</xsl:variable>
							<timeRange>
								<xsl:value-of select="concat('0','/',$enddatetime)"/>
							</timeRange>
						</xsl:when>
						<xsl:otherwise>
							<timeRange>
								<xsl:value-of select="concat('0','/','inf')"/>
							</timeRange>
						</xsl:otherwise>
					</xsl:choose>
					<xsl:choose>
						<xsl:when test="contains(eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:ClassificationCode,'/service/')">
							<productSpecName>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text" select="substring-after(eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:ClassificationCode,'/service')"/>
								</xsl:call-template>
							</productSpecName>
						</xsl:when>
						<xsl:when test="contains(eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:ClassificationCode,'/account')">
							<customerSpecName>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text" select="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:ClassificationCode"/>
								</xsl:call-template>
							</customerSpecName>
						</xsl:when>
						<xsl:otherwise>
							<productSpecName>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text" select="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:ClassificationCode"/>
								</xsl:call-template>
							</productSpecName>
						</xsl:otherwise>
					</xsl:choose>
					<xsl:if test="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;BillingTypeCode&quot;]/ns2:ValueCode">
						<offerType>
							<xsl:value-of select="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;BillingTypeCode&quot;]/ns2:ValueCode"/>
						</offerType>
					</xsl:if>
					<xsl:choose>
						<xsl:when test="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;PriorityCode&quot;]/ns2:ValueText/text()">
							<priority>
								<xsl:value-of select="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;PriorityCode&quot;]/ns2:ValueText"/>
							</priority>
						</xsl:when>
						<xsl:otherwise>
							<priority>
								<xsl:text disable-output-escaping="no">0</xsl:text>
							</priority>
						</xsl:otherwise>
					</xsl:choose>
					<xsl:if test="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;ProvisioningTagCode&quot;]/ns2:ValueCode/text()">
						<provisioningTag>
							<xsl:value-of select="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;ProvisioningTagCode&quot;]/ns2:ValueCode"/>
						</provisioningTag>
					</xsl:if>
					<xsl:choose>
						<xsl:when test="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;MinimumOrderQuantity&quot;]/ns2:ValueQuantity/text()">
							<purchaseMin>
								<xsl:value-of select="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;MinimumOrderQuantity&quot;]/ns2:ValueQuantity"/>
							</purchaseMin>
						</xsl:when>
						<xsl:otherwise>
							<purchaseMin>
								<xsl:text disable-output-escaping="no">-1.0</xsl:text>
							</purchaseMin>
						</xsl:otherwise>
					</xsl:choose>
					<xsl:choose>
						<xsl:when test="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;MaximumOrderQuantity&quot;]/ns2:ValueQuantity/text()">
							<purchaseMax>
								<xsl:value-of select="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;MaximumOrderQuantity&quot;]/ns2:ValueQuantity"/>
							</purchaseMax>
						</xsl:when>
						<xsl:otherwise>
							<purchaseMax>
								<xsl:text disable-output-escaping="no">-1.0</xsl:text>
							</purchaseMax>
						</xsl:otherwise>
					</xsl:choose>
					<xsl:choose>
						<xsl:when test="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;MinimumOwnershipQuantity&quot;]/ns2:ValueQuantity/text()">
							<ownMin>
								<xsl:value-of select="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;MinimumOwnershipQuantity&quot;]/ns2:ValueQuantity"/>
							</ownMin>
						</xsl:when>
						<xsl:otherwise>
							<ownMin>
								<xsl:text disable-output-escaping="no">-1.0</xsl:text>
							</ownMin>
						</xsl:otherwise>
					</xsl:choose>
					<xsl:choose>
						<xsl:when test="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;MaximumOwnershipQuantity&quot;]/ns2:ValueQuantity/text()">
							<ownMax>
								<xsl:value-of select="eboebo:SyncPriceListList/eboebo:PriceListLine/ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = &quot;MaximumOwnershipQuantity&quot;]/ns2:ValueQuantity"/>
							</ownMax>
						</xsl:when>
						<xsl:otherwise>
							<ownMax>
								<xsl:text disable-output-escaping="no">-1.0</xsl:text>
							</ownMax>
						</xsl:otherwise>
					</xsl:choose>
					<applicableQuantity>
						<xsl:text disable-output-escaping="no">REMAINING</xsl:text>
					</applicableQuantity>
					<xsl:for-each select="eboebo:SyncPriceListList/eboebo:PriceListLine/eboebo:LinePrice">
						<chargeEventMap>
							<eventName>
								<xsl:value-of select="dvm:lookupValue('oramds:/apps/AIAMetaData/dvm/PRICETYPE_EVENT.dvm',$SourceCol,eboebo:TypeCode,$TargetCol,'')"/>
							</eventName>
							<validIfCancelled>
								<xsl:text disable-output-escaping="no">false</xsl:text>
							</validIfCancelled>
							<validIfInactive>
								<xsl:text disable-output-escaping="no">false</xsl:text>
							</validIfInactive>
							<timezoneMode>
								<xsl:text disable-output-escaping="no">EVENT</xsl:text>
							</timezoneMode>
							<minQuantity>
								<xsl:text disable-output-escaping="no">0.0</xsl:text>
							</minQuantity>
							<minQuantityUnit>
								<xsl:text disable-output-escaping="no">NONE</xsl:text>
							</minQuantityUnit>
							<incrementQuantity>
								<xsl:text disable-output-escaping="no">1.0</xsl:text>
							</incrementQuantity>
							<incrementQuantityUnit>
								<xsl:text disable-output-escaping="no">NONE</xsl:text>
							</incrementQuantityUnit>
							<roundingMode>
								<xsl:text disable-output-escaping="no">NEAREST</xsl:text>
							</roundingMode>
							<xsl:choose>
								<xsl:when test="eboebo:RatePlanTypeCode = 'SINGLE_RATE_PLAN' or eboebo:RatePlanTypeCode = 'RATE_PLAN_SELECTOR'">
									<xsl:choose>
										<xsl:when test="boolean(eboebo:RatePlan[1]/eboebo:RateDetail/eboebo:PlanTier[1]/eboebo:PriceListUnrestrictedRateData/eboebo:PriceListRateData/eboebo:PurchaseRecurringChargeProrationCode/text())">
											<prorateFirst>
												<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/RATEDATA_PURCHASEPRORATIONCODE.dvm&quot;,$SourceCol,eboebo:RatePlan[1]/eboebo:RateDetail/eboebo:PlanTier[1]/eboebo:PriceListUnrestrictedRateData/eboebo:PriceListRateData/eboebo:PurchaseRecurringChargeProrationCode,$TargetCol,&quot;&quot;)"/>
											</prorateFirst>
										</xsl:when>
										<xsl:otherwise>
											<prorateFirst>
												<xsl:text disable-output-escaping="no">PRORATE_CHARGE</xsl:text>
											</prorateFirst>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="boolean(eboebo:RatePlan[1]/eboebo:RateDetail/eboebo:PlanTier[1]/eboebo:PriceListUnrestrictedRateData/eboebo:PriceListRateData/eboebo:CancelationRecurringChargeProrationCode/text())">
											<prorateLast>
												<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/RATEDATA_CANCELATIONPRORATIONCODE.dvm&quot;,$SourceCol,eboebo:RatePlan[1]/eboebo:RateDetail/eboebo:PlanTier[1]/eboebo:PriceListUnrestrictedRateData/eboebo:PriceListRateData/eboebo:CancelationRecurringChargeProrationCode,$TargetCol,&quot;&quot;)"/>
											</prorateLast>
										</xsl:when>
										<xsl:otherwise>
											<prorateLast>
												<xsl:text disable-output-escaping="no">PRORATE_CHARGE</xsl:text>
											</prorateLast>
										</xsl:otherwise>
									</xsl:choose>							 
								</xsl:when>
								<xsl:otherwise>
									<prorateFirst>
										<xsl:text disable-output-escaping="no">PRORATE_CHARGE</xsl:text>
									</prorateFirst>
									<prorateLast>
										<xsl:text disable-output-escaping="no">PRORATE_CHARGE</xsl:text>
									</prorateLast>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:if test="eboebo:RatePlanTypeCode = 'SINGLE_RATE_PLAN' or eboebo:RatePlanTypeCode = 'PIPELINE_SINGLE_RATE_PLAN'">
								<chargeRatePlanName>
									<xsl:value-of select="concat(eboebo:RatePlan/eboebo:Name,'-',../ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'InternalItemCode']/ns2:ValueText)"/>
								</chargeRatePlanName>
							</xsl:if>
							<xsl:if test="eboebo:RatePlanTypeCode = 'RATE_PLAN_SELECTOR' and boolean(eboebo:RatePlan[1]/eboebo:PriceListRatePlanSelector/eboebo:Name/text())">
								<chargeRatePlanSelectorName>
									<xsl:value-of select="concat(eboebo:RatePlan[1]/eboebo:PriceListRatePlanSelector/eboebo:Name,'-',../ns2:ItemReference/ns2:SpecificationGroup/ns2:Specification[ns2:Name = 'InternalItemCode']/ns2:ValueText)"/>
								</chargeRatePlanSelectorName>
							</xsl:if>
						</chargeEventMap>
					</xsl:for-each>
				</chargeOffering>
			</xsl:for-each>
		</ns6:PricingObjectsJXB>
	</xsl:template>
	<xsl:template name="CamelCase">
		<xsl:param name="text"/>
		<xsl:choose>
			<xsl:when test="contains($text,'/')">
				<xsl:call-template name="CamelCaseWord">
					<xsl:with-param name="text" select="substring-before($text,'/')"/>
				</xsl:call-template>
				<xsl:call-template name="CamelCase">
					<xsl:with-param name="text" select="substring-after($text,'/')"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="CamelCaseWord">
					<xsl:with-param name="text" select="$text"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="CamelCaseWord">
		<xsl:param name="text"/>
		<xsl:value-of select="translate(substring($text,1,1),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/>
		<xsl:value-of select="translate(substring($text,2,string-length($text)-1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
	</xsl:template>
	<xsl:template name="getUTCDateTime">
		<xsl:param name="datetime"/>
		<xsl:value-of select="translate($datetime,':-+','')"/>
	</xsl:template>
	
	<xsl:template name="OfflineUsageTierRange">
		<lowerBound>
			<xsl:text disable-output-escaping="no">NO_MIN</xsl:text>
		</lowerBound>
		<validFrom>
			<xsl:text disable-output-escaping="no">0</xsl:text>
		</validFrom>
		<priceTierRange>
			<upperBound>
				<xsl:text disable-output-escaping="no">NO_MAX</xsl:text>
			</upperBound>
			<scaledCharge>
				<price>
					<xsl:text disable-output-escaping="no">0.0</xsl:text>
				</price>
				<unitOfMeasure>
					<xsl:text disable-output-escaping="no">NONE</xsl:text>
				</unitOfMeasure>
				<balanceElementNumCode>
					<xsl:text disable-output-escaping="no">840</xsl:text>
				</balanceElementNumCode>
				<priceType>
					<xsl:text disable-output-escaping="no">CONSUMPTION</xsl:text>
				</priceType>
				<taxTime>
					<xsl:text disable-output-escaping="no">NONE</xsl:text>
				</taxTime>
				<glid>
					<xsl:text disable-output-escaping="no">1600</xsl:text>
				</glid>
				<incrementStep>
					<xsl:text disable-output-escaping="no">1</xsl:text>
				</incrementStep>
				<incrementRounding>
					<xsl:text disable-output-escaping="no">NONE</xsl:text>
				</incrementRounding>
			</scaledCharge>
		</priceTierRange>
	</xsl:template>
	
		<xsl:template name="GenericTierRange">
		<xsl:param name="ChargeType"/>
		<xsl:param name="PlanImpacts"/>
		<xsl:param name="AllPlanImpacts"/>
		<xsl:param name="LowerBound" />
		<xsl:variable name="MinQty" select="$PlanImpacts[1]/eboebo:RateMinimumQuantity"/>
		<xsl:variable name="MaxQty" select="$PlanImpacts[1]/eboebo:RateMaximumQuantity"/>
			
		<xsl:if test="not($AllPlanImpacts[eboebo:RateMaximumQuantity=$MinQty][1]) and $LowerBound!=$MinQty"> 
			<xsl:if test="$ChargeType='Recurring'">
				<tierRange>
					<upperBound>
						<xsl:value-of select="$MinQty"/>
					</upperBound>
					<xsl:for-each select="$PlanImpacts">
						<recurringCharge>
							<xsl:call-template name="TierChargeDetails">
								<xsl:with-param name="ScaledQty" select="eboebo:ScaledQuantity"/>
								<xsl:with-param name="ScaledUnit" select="eboebo:ScaledUnit"/>
								<xsl:with-param name="MonetaryID" select="ns2:Identification/ns2:ID"/>
								<xsl:with-param name="GrantIndicator" select="eboebo:EffectivityEnabledIndicator"/>
								<xsl:with-param name="DiscIndicator" select="eboebo:DiscountableIndicator"/>
								<xsl:with-param name="glid" select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
								<xsl:with-param name="StartDateSelector" select="eboebo:StartDateSelector"/>
								<xsl:with-param name="EndDateSelector" select="eboebo:EndDateSelector"/>
								<xsl:with-param name="StartRelativeUnit" select="eboebo:StartRelativeUnit"/>
								<xsl:with-param name="StartRelativeUOM" select="eboebo:StartRelativeUOM"/>
								<xsl:with-param name="EndRelativeUnit" select="eboebo:EndRelativeUnit"/>
								<xsl:with-param name="EndRelativeUOM" select="eboebo:EndRelativeUOM"/>
								<xsl:with-param name="StartDateTime" select="ns2:EffectiveTimePeriod/ns2:StartDateTime"/>
								<xsl:with-param name="EndDateTime" select="ns2:EffectiveTimePeriod/ns2:EndDateTime"/>
							</xsl:call-template>
							<xsl:if test="eboebo:EffectivityEnabledIndicator!='true' and boolean(ns2:GLAccount/ns2:Identification/ns2:ID/text())">
								<glid>
									<xsl:value-of select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
								</glid>
							</xsl:if>
							<proratable>
								<xsl:value-of select="eboebo:ProrationIndicator"/>
							</proratable>
						</recurringCharge>
					</xsl:for-each>
				</tierRange>
			</xsl:if>
			<xsl:if test="$ChargeType='OneTime'">
				<tierRange>
					<upperBound>
						<xsl:value-of select="$MinQty"/>
					</upperBound>
					<xsl:for-each select="$PlanImpacts">
						<oneTimeCharge>
							<xsl:call-template name="TierChargeDetails">
								<xsl:with-param name="ScaledQty" select="eboebo:ScaledQuantity"/>
								<xsl:with-param name="ScaledUnit" select="eboebo:ScaledUnit"/>
								<xsl:with-param name="MonetaryID" select="ns2:Identification/ns2:ID"/>
								<xsl:with-param name="GrantIndicator" select="eboebo:EffectivityEnabledIndicator"/>
								<xsl:with-param name="DiscIndicator" select="eboebo:DiscountableIndicator"/>
								<xsl:with-param name="glid" select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
								<xsl:with-param name="StartDateSelector" select="eboebo:StartDateSelector"/>
								<xsl:with-param name="EndDateSelector" select="eboebo:EndDateSelector"/>
								<xsl:with-param name="StartRelativeUnit" select="eboebo:StartRelativeUnit"/>
								<xsl:with-param name="StartRelativeUOM" select="eboebo:StartRelativeUOM"/>
								<xsl:with-param name="EndRelativeUnit" select="eboebo:EndRelativeUnit"/>
								<xsl:with-param name="EndRelativeUOM" select="eboebo:EndRelativeUOM"/>
								<xsl:with-param name="StartDateTime" select="ns2:EffectiveTimePeriod/ns2:StartDateTime"/>
								<xsl:with-param name="EndDateTime" select="ns2:EffectiveTimePeriod/ns2:EndDateTime"/>
							</xsl:call-template>
							<xsl:if test="eboebo:EffectivityEnabledIndicator!='true'">
								<taxTime>
									<xsl:text disable-output-escaping="no">NONE</xsl:text>
								</taxTime>
							</xsl:if>
						</oneTimeCharge>
					</xsl:for-each>
				</tierRange>
			</xsl:if>
			<xsl:if test="$ChargeType='OnlineUsage'">
				<priceTierRange>
					<upperBound>
						<xsl:value-of select="$MinQty"/>
					</upperBound>
					<xsl:for-each select="$PlanImpacts">
						<scaledCharge>
							<xsl:call-template name="TierChargeDetails">
								<xsl:with-param name="ScaledQty" select="eboebo:ScaledQuantity"/>
								<xsl:with-param name="ScaledUnit" select="eboebo:ScaledUnit"/>
								<xsl:with-param name="MonetaryID" select="ns2:Identification/ns2:ID"/>
								<xsl:with-param name="GrantIndicator" select="eboebo:EffectivityEnabledIndicator"/>
								<xsl:with-param name="DiscIndicator" select="eboebo:DiscountableIndicator"/>
								<xsl:with-param name="glid" select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
								<xsl:with-param name="StartDateSelector" select="eboebo:StartDateSelector"/>
								<xsl:with-param name="EndDateSelector" select="eboebo:EndDateSelector"/>
								<xsl:with-param name="StartRelativeUnit" select="eboebo:StartRelativeUnit"/>
								<xsl:with-param name="StartRelativeUOM" select="eboebo:StartRelativeUOM"/>
								<xsl:with-param name="EndRelativeUnit" select="eboebo:EndRelativeUnit"/>
								<xsl:with-param name="EndRelativeUOM" select="eboebo:EndRelativeUOM"/>
								<xsl:with-param name="StartDateTime" select="ns2:EffectiveTimePeriod/ns2:StartDateTime"/>
								<xsl:with-param name="EndDateTime" select="ns2:EffectiveTimePeriod/ns2:EndDateTime"/>
							</xsl:call-template>
							<xsl:if test="eboebo:EffectivityEnabledIndicator!='true'">
								<taxTime>
									<xsl:text disable-output-escaping="no">NONE</xsl:text>
								</taxTime>
							</xsl:if>
							<incrementStep>
								<xsl:text disable-output-escaping="no">1</xsl:text>
							</incrementStep>
							<incrementRounding>
								<xsl:text disable-output-escaping="no">NONE</xsl:text>
							</incrementRounding>
						</scaledCharge>
					</xsl:for-each>
				</priceTierRange>
			</xsl:if>
		</xsl:if>
		<xsl:if test="$MaxQty != ''">
			<xsl:if test="$ChargeType='Recurring'">
				<tierRange>
					<upperBound>
						<xsl:value-of select="$MaxQty"/>
					</upperBound>
					<xsl:for-each select="$PlanImpacts">
						<recurringCharge>
							<xsl:call-template name="TierChargeDetails">
								<xsl:with-param name="ScaledQty" select="eboebo:ScaledQuantity"/>
								<xsl:with-param name="ScaledUnit" select="eboebo:ScaledUnit"/>
								<xsl:with-param name="MonetaryID" select="ns2:Identification/ns2:ID"/>
								<xsl:with-param name="GrantIndicator" select="eboebo:EffectivityEnabledIndicator"/>
								<xsl:with-param name="DiscIndicator" select="eboebo:DiscountableIndicator"/>
								<xsl:with-param name="glid" select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
								<xsl:with-param name="StartDateSelector" select="eboebo:StartDateSelector"/>
								<xsl:with-param name="EndDateSelector" select="eboebo:EndDateSelector"/>
								<xsl:with-param name="StartRelativeUnit" select="eboebo:StartRelativeUnit"/>
								<xsl:with-param name="StartRelativeUOM" select="eboebo:StartRelativeUOM"/>
								<xsl:with-param name="EndRelativeUnit" select="eboebo:EndRelativeUnit"/>
								<xsl:with-param name="EndRelativeUOM" select="eboebo:EndRelativeUOM"/>
								<xsl:with-param name="StartDateTime" select="ns2:EffectiveTimePeriod/ns2:StartDateTime"/>
								<xsl:with-param name="EndDateTime" select="ns2:EffectiveTimePeriod/ns2:EndDateTime"/>
							</xsl:call-template>
							<xsl:if test="eboebo:EffectivityEnabledIndicator!='true' and boolean(ns2:GLAccount/ns2:Identification/ns2:ID/text())">
								<glid>
									<xsl:value-of select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
								</glid>
							</xsl:if>
							<proratable>
								<xsl:value-of select="eboebo:ProrationIndicator"/>
							</proratable>
						</recurringCharge>
					</xsl:for-each>
				</tierRange>
			</xsl:if>
			<xsl:if test="$ChargeType='OneTime'">
				<tierRange>
					<upperBound>
						<xsl:value-of select="$MaxQty"/>
					</upperBound>
					<xsl:for-each select="$PlanImpacts">
						<oneTimeCharge>
							<xsl:call-template name="TierChargeDetails">
								<xsl:with-param name="ScaledQty" select="eboebo:ScaledQuantity"/>
								<xsl:with-param name="ScaledUnit" select="eboebo:ScaledUnit"/>
								<xsl:with-param name="MonetaryID" select="ns2:Identification/ns2:ID"/>
								<xsl:with-param name="GrantIndicator" select="eboebo:EffectivityEnabledIndicator"/>
								<xsl:with-param name="DiscIndicator" select="eboebo:DiscountableIndicator"/>
								<xsl:with-param name="glid" select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
								<xsl:with-param name="StartDateSelector" select="eboebo:StartDateSelector"/>
								<xsl:with-param name="EndDateSelector" select="eboebo:EndDateSelector"/>
								<xsl:with-param name="StartRelativeUnit" select="eboebo:StartRelativeUnit"/>
								<xsl:with-param name="StartRelativeUOM" select="eboebo:StartRelativeUOM"/>
								<xsl:with-param name="EndRelativeUnit" select="eboebo:EndRelativeUnit"/>
								<xsl:with-param name="EndRelativeUOM" select="eboebo:EndRelativeUOM"/>
								<xsl:with-param name="StartDateTime" select="ns2:EffectiveTimePeriod/ns2:StartDateTime"/>
								<xsl:with-param name="EndDateTime" select="ns2:EffectiveTimePeriod/ns2:EndDateTime"/>
							</xsl:call-template>
							<xsl:if test="eboebo:EffectivityEnabledIndicator!='true'">
								<taxTime>
									<xsl:text disable-output-escaping="no">NONE</xsl:text>
								</taxTime>
							</xsl:if>
						</oneTimeCharge>
					</xsl:for-each>
				</tierRange>
			</xsl:if>
			<xsl:if test="$ChargeType='OnlineUsage'">
				<priceTierRange>
					<upperBound>
						<xsl:value-of select="$MaxQty"/>
					</upperBound>
					<xsl:for-each select="$PlanImpacts">
						<scaledCharge>
							<xsl:call-template name="TierChargeDetails">
								<xsl:with-param name="ScaledQty" select="eboebo:ScaledQuantity"/>
								<xsl:with-param name="ScaledUnit" select="eboebo:ScaledUnit"/>
								<xsl:with-param name="MonetaryID" select="ns2:Identification/ns2:ID"/>
								<xsl:with-param name="GrantIndicator" select="eboebo:EffectivityEnabledIndicator"/>
								<xsl:with-param name="DiscIndicator" select="eboebo:DiscountableIndicator"/>
								<xsl:with-param name="glid" select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
								<xsl:with-param name="StartDateSelector" select="eboebo:StartDateSelector"/>
								<xsl:with-param name="EndDateSelector" select="eboebo:EndDateSelector"/>
								<xsl:with-param name="StartRelativeUnit" select="eboebo:StartRelativeUnit"/>
								<xsl:with-param name="StartRelativeUOM" select="eboebo:StartRelativeUOM"/>
								<xsl:with-param name="EndRelativeUnit" select="eboebo:EndRelativeUnit"/>
								<xsl:with-param name="EndRelativeUOM" select="eboebo:EndRelativeUOM"/>
								<xsl:with-param name="StartDateTime" select="ns2:EffectiveTimePeriod/ns2:StartDateTime"/>
								<xsl:with-param name="EndDateTime" select="ns2:EffectiveTimePeriod/ns2:EndDateTime"/>
							</xsl:call-template>
							<xsl:if test="eboebo:EffectivityEnabledIndicator!='true'">
								<taxTime>
									<xsl:text disable-output-escaping="no">NONE</xsl:text>
								</taxTime>
							</xsl:if>
							<incrementStep>
								<xsl:text disable-output-escaping="no">1</xsl:text>
							</incrementStep>
							<incrementRounding>
								<xsl:text disable-output-escaping="no">NONE</xsl:text>
							</incrementRounding>
						</scaledCharge>
					</xsl:for-each>
				</priceTierRange>
			</xsl:if>
		</xsl:if>
	</xsl:template> 
	<xsl:template name="TierChargeDetails">
		<xsl:param name="ScaledQty"/>
		<xsl:param name="ScaledUnit"/>
		<xsl:param name="MonetaryID"/>
		<xsl:param name="GrantIndicator"/>
		<xsl:param name="DiscIndicator"/>
		<xsl:param name="glid"/>
		<xsl:param name="StartDateSelector"/>
		<xsl:param name="EndDateSelector"/>
		<xsl:param name="StartRelativeUnit"/>
		<xsl:param name="StartRelativeUOM"/>
		<xsl:param name="EndRelativeUnit"/>
		<xsl:param name="EndRelativeUOM"/>
		<xsl:param name="StartDateTime"/>
		<xsl:param name="EndDateTime"/>	
		<price>
			<xsl:value-of select="$ScaledQty"/>
		</price>
		<xsl:choose>
			<xsl:when test="$ScaledUnit != ''">
				<unitOfMeasure>
					<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/PLANIMPACT_UNITCODE.dvm&quot;,$SourceCol,$ScaledUnit,$TargetCol,&quot;&quot;)"/>
				</unitOfMeasure>
			</xsl:when>
			<xsl:otherwise>
				<unitOfMeasure>
					<xsl:text disable-output-escaping="no">NONE</xsl:text>
				</unitOfMeasure>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:choose>
			<xsl:when test="$MonetaryID != ''">
				<xsl:variable name="MonetaryID">
					<xsl:value-of select="substring-before($MonetaryID,&quot;:&quot;)"/>
				</xsl:variable>
				<xsl:variable name="MonetaryelenID">
					<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/CURRENCY_CODE.dvm&quot;,$SourceCol,$MonetaryID,'PDC_BALNUMCODE',&quot;&quot;)"/>
				</xsl:variable>
				<xsl:variable name="NonMonetaryelenID">
					<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/RESOURCE.dvm&quot;,$SourceCol,$MonetaryID,$TargetCol,&quot;&quot;)"/>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="$MonetaryelenID != ''">
						<balanceElementNumCode>
							<xsl:value-of select="$MonetaryelenID"/>
						</balanceElementNumCode>
					</xsl:when>
					<xsl:when test="$NonMonetaryelenID != ''">
						<balanceElementNumCode>
							<xsl:value-of select="$NonMonetaryelenID"/>
						</balanceElementNumCode>
					</xsl:when>
					<xsl:otherwise>
						<balanceElementNumCode>
							<xsl:text disable-output-escaping="no">840</xsl:text>
						</balanceElementNumCode>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<balanceElementNumCode>
					<xsl:text disable-output-escaping="no">840</xsl:text>
				</balanceElementNumCode>
			</xsl:otherwise>
		</xsl:choose>
		<discountable>
			<xsl:value-of select="$DiscIndicator"/>
		</discountable>
		<xsl:choose>
			<xsl:when test="$GrantIndicator = 'true'">
				<priceType>
					<xsl:text disable-output-escaping="no">GRANT</xsl:text>
				</priceType>
				<xsl:choose>
					<xsl:when test="boolean(ns2:GLAccount/ns2:Identification/ns2:ID/text())">
						<glid>
							<xsl:value-of select="ns2:GLAccount/ns2:Identification/ns2:ID"/>
						</glid>
					</xsl:when>
				</xsl:choose>
				<priceValidity>                  
					<xsl:choose>
						<xsl:when test="boolean($StartDateSelector='DATE')">
							<startValidityMode>
								<xsl:text disable-output-escaping="no">ABSOLUTE</xsl:text>
							</startValidityMode>
						</xsl:when>
						<xsl:when test="boolean($StartDateSelector='RELATIVE')">
							<startValidityMode>
								<xsl:text disable-output-escaping="no">RELATIVE</xsl:text>
							</startValidityMode>
						</xsl:when>
						<xsl:when test="boolean($StartDateSelector='FIRST_USAGE')">
							<startValidityMode>
								<xsl:text disable-output-escaping="no">FIRST_USAGE</xsl:text>
							</startValidityMode>
						</xsl:when>
					<!-- Non-Currency changes - Release 17.2: Sprint 13 Start -->			
						<xsl:when test="boolean($StartDateSelector='IMMEDIATE')">
							<startValidityMode>
								<xsl:text disable-output-escaping="no">IMMEDIATE</xsl:text>
							</startValidityMode>
						</xsl:when>
					<!-- Non-Currency changes - Release 17.2: Sprint 13 End -->
						<xsl:when test="boolean($StartDateSelector='')">
							<startValidityMode>
								<xsl:text disable-output-escaping="no">FOREVER</xsl:text>
							</startValidityMode>
						</xsl:when>
					</xsl:choose>
					<xsl:choose>
						<xsl:when test="boolean($EndDateSelector='DATE') and boolean($EndDateTime != '')">
							<endValidityMode>
								<xsl:text disable-output-escaping="no">ABSOLUTE</xsl:text>
							</endValidityMode>
						</xsl:when>
						<xsl:when test="boolean($EndDateSelector='RELATIVE')">
							<endValidityMode>
								<xsl:text disable-output-escaping="no">RELATIVE_TO_START</xsl:text>
							</endValidityMode>
						</xsl:when>
						<xsl:when test="boolean($EndDateSelector='') or boolean($EndDateTime = '')">
							<endValidityMode>
								<xsl:text disable-output-escaping="no">NEVER</xsl:text>
							</endValidityMode>
						</xsl:when>
					</xsl:choose>
					<xsl:variable name="startdatetime">
						<xsl:choose>
							<xsl:when test="boolean($StartDateSelector='DATE') and boolean($StartDateTime != '')">
								<xsl:call-template name="getUTCDateTime">
									<xsl:with-param name="datetime" select="substring-before($StartDateTime,'+')"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="(boolean($EndDateSelector='DATE') and not(boolean($StartDateSelector='DATE')) and boolean($EndDateTime != '')) or (boolean($StartDateSelector='DATE') and boolean($StartDateTime = ''))">
								<xsl:value-of select='xp20:format-dateTime(xp20:current-dateTime(),"[Y][M01][D01]T[H01][m01][s01]")'/>
							</xsl:when>
						</xsl:choose>
					</xsl:variable>
					<xsl:variable name="enddatetime">
						<xsl:choose>
							<xsl:when test="boolean($EndDateSelector='DATE')">
								<xsl:call-template name="getUTCDateTime">
									<xsl:with-param name="datetime" select="substring-before($EndDateTime,'+')"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="boolean($StartDateSelector='DATE') and not(boolean($EndDateSelector='DATE')) and boolean($StartDateTime != '')">
								<xsl:call-template name="getUTCDateTime">
									<xsl:with-param name="datetime" select="substring-before($StartDateTime,'+')"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="boolean($StartDateSelector='DATE') and not(boolean($EndDateSelector='DATE')) and boolean($StartDateTime = '')">
								<xsl:value-of select='xp20:format-dateTime(xp20:current-dateTime(),"[Y][M01][D01]T[H01][m01][s01]")'/>
							</xsl:when>
						</xsl:choose>
					</xsl:variable>
					<xsl:if test="boolean($startdatetime != '') and boolean($enddatetime != '')">
						<validityRange>
							<xsl:value-of select="concat($startdatetime,'/',$enddatetime)"/>
						</validityRange>
					</xsl:if>
					<xsl:if test="boolean($StartDateSelector='RELATIVE')">
						<relativeStartOffset>
							<xsl:value-of select="$StartRelativeUnit"/>
						</relativeStartOffset>
					</xsl:if>
					<xsl:if test="boolean($EndDateSelector='RELATIVE')">
						<relativeEndOffset>
							<xsl:value-of select="$EndRelativeUnit"/>
						</relativeEndOffset>
					</xsl:if>
					<xsl:if test="boolean($StartDateSelector='RELATIVE')">
						<relativeStartOffsetUnit>
							<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/PLANIMPACT_UNITCODE.dvm&quot;,$SourceCol,$StartRelativeUOM,$TargetCol,&quot;&quot;)"/>
						</relativeStartOffsetUnit>
					</xsl:if>
					<xsl:if test="boolean($EndDateSelector='RELATIVE')">								 
						<relativeEndOffsetUnit>
							<xsl:value-of select="dvm:lookupValue(&quot;oramds:/apps/AIAMetaData/dvm/PLANIMPACT_UNITCODE.dvm&quot;,$SourceCol,$EndRelativeUOM,$TargetCol,&quot;&quot;)"/>
						</relativeEndOffsetUnit>
					</xsl:if>
				</priceValidity>
			</xsl:when>
			<xsl:otherwise>
				<priceType>
					<xsl:text disable-output-escaping="no">CONSUMPTION</xsl:text>
				</priceType>				
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>  
</xsl:stylesheet>
