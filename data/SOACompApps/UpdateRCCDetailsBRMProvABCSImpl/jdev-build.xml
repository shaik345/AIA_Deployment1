<?xml version="1.0" encoding="UTF-8"?>
<project name="bpel.deploy" default="deploy" basedir=".">
    <!--
      This ant build file was generated by JDev to deploy the BPEL process.
      DONOT EDIT THIS JDEV GENERATED FILE. Any customization should be done
      in default target in user created pre-build.xml or post-build.xml
    -->
    <property name="process.dir" value="${basedir}" /> 
    
    <!-- Set BPEL process name -->
    <xmlproperty file="${process.dir}/bpel/bpel.xml" />
    <property name="process.name" value="${BPELSuitcase.BPELProcess(id)}" /> 
    
    <property environment="env" />
     <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   - Check for environment variable existence 
   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <fail message="Please set the ORACLE_HOME environment variable">
        <condition>
  	 <not>
         	<isset property="env.ORACLE_HOME" />
 	</not>
       </condition>
    </fail>
    <fail message="Please set the AIA_HOME environment variable">
        <condition>
  	  <not>
       	       <isset property="env.AIA_HOME" />
 	  </not>
        </condition>
    </fail>
  <!--Set oracle.home and aia.home-->  
  <property name="oracle.home" value="${env.ORACLE_HOME}" />
  <property name="aia.home" value="${env.AIA_HOME}" />
 
   <!--Get target deployment Env properties - USER/PWD/HOST/PORT -->
   <property file="${aia.home}/config/deploy.properties" />

    <!-- Set bpel.home from developer prompt's environment variable BPEL_HOME -->
    <condition property="bpel.home" value="${env.BPEL_HOME}">
        <available file="${env.BPEL_HOME}/utilities/ant-orabpel.xml" />
    </condition>
    <!-- If bpel.home is not yet using env.BPEL_HOME, set it for JDev -->    
    <property name="bpel.home" value="${oracle.home}/bpel" />

    <!-- First override from build.properties in process.dir, if available -->
    <property file="${process.dir}/build.properties" /> 

    <!-- import custom ant tasks for the BPEL PM -->
    <import file="${bpel.home}/utilities/ant-orabpel.xml" />
    
    <!-- Use deployment related default properties -->
    <property file="${bpel.home}/utilities/ant-orabpel.properties" />  

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   - Import, to enable the custom WSDL  modification  ant tasks ...
   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <import file="${aia.home}/Infrastructure/install/lib/WSDLTaskdefs.xml" />
   
   <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   - Import, to enable the undeploy and fetch URL ant tasks ...
   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<import file="${aia.home}/Infrastructure/install/lib/AIABPELTaskdefs.xml" />
    
	
	<!--=============================-->
    <!-- default "deploy" target     -->
    <!--=============================-->    
    <target name="deploy" depends="pre-build, process-deploy, post-build" />

    <!--=============================-->
    <!-- Process deployment targets  -->
    <!--=============================-->  
    <target name="process-deploy" depends="EditAIAConfigProperties,CustomiseWSDL,validateTask, compile, deployProcess, deployTaskForm, deployDecisionServices, bsrPublish" />

 <target name="CustomiseWSDL">
        <echo>
--------------------------------------------------------------
| Customising WSDL
--------------------------------------------------------------
        </echo>
      
  </target>
    
	<target name="validateTask">
        <echo>
--------------------------------------------------------------
| Validating workflow
--------------------------------------------------------------
        </echo>
        <validateTask dir="${process.dir}/bpel" /> 
    </target>
	<target name="EditAIAConfigProperties">
		   <echo>
--------------------------------------------------------------
| Editing AIAConfigurationProperties.xml
--------------------------------------------------------------
        </echo>
		<property name="AIAServiceConfigurationProperties.xml" value="AIAServiceConfigurationProperties.xml" />
		<available file="${process.dir}/AIAServiceConfigurationProperties.xml" property="AIAServiceConfigurationProperties.xml.present" />

		<taskdef resource="net/sf/antcontrib/antcontrib.properties" />

		<if>
			<equals arg1="${AIAServiceConfigurationProperties.xml.present}" arg2="true" />
		<then>
			<ant target="merge" />
		</then>
		<else>
			<echo>AIAServiceConfiguration.xml not present</echo>
		</else>
		</if>
	
	</target>
	<target name="merge">
	
		<copy file="${process.dir}/AIAServiceConfigurationProperties.xml" tofile="${process.dir}/AIAServiceConfigurationPropertiestemp.xml" overwrite="true">
		    <filterchain>
            		<expandproperties />
            </filterchain>

        </copy>
	
	<condition property="command" value="/c antExit xslMerge">
          <os family="windows" />
       </condition>
       <condition property="command" value="ant --noconfig xslMerge">
          <os family="unix" /> 
       </condition>
       <condition property="windows.or.unix" value="cmd.exe">
          <os family="windows" />
       </condition>
       <condition property="delimiter" value=";">
           <os family="windows" />
       </condition>

       <condition property="windows.or.unix" value="/bin/sh">
           <os family="unix" />
       </condition>
       <condition property="delimiter" value=":">
           <os family="unix" />
       </condition>
	

       <exec dir="." executable="${windows.or.unix}" failonerror="true">
         <env key="CLASSPATH" value=".${delimiter}${aia.home}/apache-ant-1.7.0/lib/xercesImpl.jar${delimiter}${aia.home}/lib/xalan.jar" />
         <arg line="${command}" />
       </exec>

			
     </target>	
     <target name="xslMerge">
       <copy file="${aia.home}/config/AIAConfigurationProperties.xml" tofile="${aia.home}/config/AIAConfigurationProperties.xml.bck" overwrite="true" />
   	    <taskdef resource="net/sf/antcontrib/antcontrib.properties" />
  			<if>
 				<equals arg1="${forceMergeAIAConfigProperties}" arg2="true" />
            <then>
				<xslt style="${aia.home}/config/UpgradeMergeAIAConfigurationProperties.xsl" in="${aia.home}/config/AIAConfigurationProperties.xml" out="${aia.home}/config/temp.xml">
		 			<param name="file" expression="${process.dir}/AIAServiceConfigurationPropertiestemp.xml" />
					<param name="forceMergeAIAConfigProperties" expression="true" />
				</xslt>
 			</then>
 			<else>
   				<xslt style="${aia.home}/config/MergeAIAConfigurationProperties.xsl" in="${aia.home}/config/AIAConfigurationProperties.xml" out="${aia.home}/config/temp.xml">
					<param name="file" expression="${process.dir}/AIAServiceConfigurationPropertiestemp.xml" />
				</xslt>
            </else>
            </if>
		<delete file="${aia.home}/config/AIAConfigurationProperties.xml" />
	    <move file="${aia.home}/config/temp.xml" tofile="${aia.home}/config/AIAConfigurationProperties.xml" />
		<delete file="${aia.home}/config/temp.xml" />
		<delete file="${process.dir}/AIAServiceConfigurationPropertiestemp.xml" />	
    </target>
	

    <target name="compile">

        <echo>
--------------------------------------------------------------
| Compiling bpel process ${process.name}, revision ${rev}
--------------------------------------------------------------
        </echo>

        <bpelc input="${process.dir}/bpel/bpel.xml" out="${process.dir}/output" rev="${rev}" home="${bpel.home}">
		    <classpath>
			   <pathelement location="${aia.home}/lib/aia.jar" />
			   <pathelement location="${aia.home}/Infrastructure/install/applications/ESBErrorListenerMDB.jar" />
		    </classpath>
		

</bpelc>
    </target>


    <target name="deployProcess">

        <echo>
--------------------------------------------------------------
| Deploying bpel process ${process.name} on ${http.hostname}, port ${http.port}
--------------------------------------------------------------
        </echo>
        <deployProcess user="${admin.user}" password="${admin.password}" domain="${domain}" process="${process.name}" rev="${rev}" dir="${process.dir}/output" hostname="${http.hostname}" httpport="${http.port}" verbose="${verbose}" />

    </target>


    <target name="deployTaskForm">
        <echo>
--------------------------------------------------------------
| Deploying workflow form for ${process.name} on ${j2ee.hostname}, port ${http.port}
--------------------------------------------------------------
        </echo>
        <deployTaskForm platform="${platform}" dir="${process.dir}/public_html" domain="${domain}" process="${process.name}" rev="${rev}" user="${admin.user}" password="${admin.password}" hostname="${j2ee.hostname}" cluster="${cluster}" rmiport="${rmi.port}" opmnrequestport="${opmn.requestport}" oc4jinstancename="${oc4jinstancename}" asinstancename="${asinstancename}" verbose="${verbose}" /> 
    </target>


    <target name="deployDecisionServices">
        <echo>
--------------------------------------------------------------
| Deploying decision services for ${process.name} on ${j2ee.hostname}, port ${http.port}
--------------------------------------------------------------
        </echo>
        <deployDecisionServices platform="${platform}" dir="${process.dir}/decisionservices" domain="${domain}" process="${process.name}" rev="${rev}" user="${admin.user}" password="${admin.password}" hostname="${j2ee.hostname}" httpport="${http.port}" cluster="${cluster}" rmiport="${rmi.port}" opmnrequestport="${opmn.requestport}" oc4jinstancename="${oc4jinstancename}" asinstancename="${asinstancename}" verbose="${verbose}" /> 
    </target>

	<!--=============================-->
    <!-- Process Undeployment target  -->
    <!--=============================-->  

	<target name="undeploy">
    <echo>
-------------------------------------------------------------
| Undeploying bpel ${process.name} from ${http.hostname}, http.port ${http.port} , opmn.port ${opmn.requestport}
-------------------------------------------------------------
        </echo>
	<undeployBPELProcess domain="${domain}" process="${process.name}" rev="${rev}" user="${admin.user}" password="${admin.password}" hostname="${http.hostname}" opmnrequestport="${opmn.requestport}" oc4jinstancename="${oc4jinstancename}" platform="${platform}" httpport="${http.port}" />
	</target>

	<!--=============================-->
    <!-- Process Registration target  -->
    <!--=============================--> 
  
    <target name="bsrPublish">
	<registerBPELWsdl domain="${domain}" process="${process.name}" rev="${rev}" user="${admin.user}" password="${admin.password}" hostname="${http.hostname}" opmnrequestport="${opmn.requestport}" oc4jinstancename="${oc4jinstancename}" url="" platform="${platform}" httpport="${http.port}" />
	
	<ant antfile="${aia.home}/Infrastructure/install/scripts/FPBSRPublish.xml" target="publishConcreteWSDLS">
		 <property name="concretewsdl" value="${url}" />
		 
	</ant>
	</target>

    <!--=============================-->
    <!--     BPEL Test targets       -->
    <!--=============================-->
    <target name="test" depends="deployTestSuites, bpelTest, report" /> 
    
    <target name="prepareTests">
        <echo>
--------------------------------------------------------------
| Preparing BPEL tests for deployment
--------------------------------------------------------------
        </echo>
        <delete file="${process.dir}/output/bpeltest.zip" quiet="true" />

        <zip basedir="${process.dir}/bpel/testsuites" filesonly="true" excludes="test_suites.xml, **/excludes/*" destfile="${process.dir}/output/bpeltest.zip" />

    </target>


    <target name="deployTestSuites" depends="prepareTests">
        <echo>
--------------------------------------------------------------
| Deploying bpel tests ${process.name} on ${http.hostname}, port ${http.port}
--------------------------------------------------------------
        </echo>

        <deployTestSuites user="${admin.user}" password="${admin.password}" hostname="${http.hostname}" httpport="${http.port}" domain="${domain}" process="${process.name}" rev="${rev}" testfile="${process.dir}/output/bpeltest.zip" verbose="${verbose}" />
    </target>
    

    <!-- "bpeltest" target runs deployed testsuites of a BPEL process -->    
    <target name="bpelTest">
        <echo>
--------------------------------------------------------------
| Executing process ${process.name}(v.${rev}): minCoverage=${bpeltest.minCoverage}, timeout=${bpeltest.timeout} sec, numWorkers=${bpeltest.numWorkers}
--------------------------------------------------------------        
        </echo>
        <delete dir="${bpeltest.results.dir}/xml/${process.name}" quiet="true" />

        <bpeltest user="${admin.user}" password="${admin.password}" hostname="${http.hostname}" httpport="${http.port}" domain="${domain}" process="${process.name}" rev="${rev}" name="${process.name}Tests" timeout="${bpeltest.timeout}" numWorkers="${bpeltest.numWorkers}" minCoverage="${bpeltest.minCoverage}" callHandler="${bpeltest.callHandler}" context="${bpel.context.properties}" resultsDir="${bpeltest.results.dir}/xml/${process.name}" resultsPropertyFile="${bpeltest.results.dir}/${process.name}.properties" verbose="${verbose}" />
        <property file="${bpeltest.results.dir}/${process.name}.properties" />
        <echo>
--------------------------------------------------------------
Executed ${test.total.count} test(s) for ${process.name} (v.${rev}) with ${test.failure.count} failure(s)
--------------------------------------------------------------
        </echo>
    </target>


    <!-- "report" target creates JUnitReport for testsuites run by bpeltest. -->
    <target name="report">
        <echo>
--------------------------------------------------------------
Creating BPELTest JUnitReport at ${bpeltest.results.dir}${file.separator}html${file.separator}index.html
--------------------------------------------------------------
        </echo>    
        <mkdir dir="${bpeltest.results.dir}/xml" />
        <junitreport todir="${bpeltest.results.dir}/xml">
            <fileset dir="${bpeltest.results.dir}/xml">
                <include name="*/TEST-*.xml" />
                <include name="*/BPEL-*.xml" />
            </fileset>
            <report format="frames" todir="${bpeltest.results.dir}/html" />
        </junitreport>   
    </target>

    <!-- If pre-build.xml and post-build.xml exists, call its default target -->
    <condition property="exists.pre-build.xml">
        <available file="${process.dir}/pre-build.xml" />
    </condition>
    <target name="pre-build" if="exists.pre-build.xml">
        <ant antfile="${process.dir}/pre-build.xml" inheritAll="false" />
    </target>

    <condition property="exists.post-build.xml">
        <available file="${process.dir}/post-build.xml" />
    </condition>
    <target name="post-build" if="exists.post-build.xml">
        <ant antfile="${process.dir}/post-build.xml" inheritAll="false" />
    </target>

    <!-- Convenience targets -->
    <target name="deploy_test" depends="deploy, test" /> 
    
</project>
